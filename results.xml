<testsuites id="" name="" tests="2" failures="2" skipped="0" errors="0" time="22.10149900000001">
<testsuite name="v2/orderDownloads.spec.ts" timestamp="1671996383548" hostname="" tests="1" failures="1" skipped="0" time="0.622" errors="0">
<testcase name="order downloads api test create order downloads" classname="v2/orderDownloads.spec.ts › order downloads api test › create order downloads" time="0.622">
<failure message="orderDownloads.spec.ts:37:10 create order downloads" type="FAILURE">
<![CDATA[  v2/orderDownloads.spec.ts:37:10 › order downloads api test › create order downloads ==============

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createOrderDownload('33'), { data: { ids: [31] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('delete order downloads', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orderDownloads.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createOrderDownload('33'), { data: { ids: [31] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('delete order downloads', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orderDownloads.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createOrderDownload('33'), { data: { ids: [31] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('delete order downloads', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orderDownloads.spec.ts:40:31
]]>
</failure>
<system-out>
<![CDATA[ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m1[39m,
  name: [32m'Test_attribute_qtjuoxeh'[39m,
  slug: [32m'pa_test_attribute_qtjuoxeh'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m19[39m,
  name: [32m'Test_attributeTerm_bejqsdnn'[39m,
  slug: [32m'test_attributeterm_bejqsdnn'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'woocommerce_rest_required_product_reference'[39m,
  message: [32m'Product ID or SKU is required.'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m2[39m,
  name: [32m'Test_attribute_gwtyqgnz'[39m,
  slug: [32m'pa_test_attribute_gwtyqgnz'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m20[39m,
  name: [32m'Test_attributeTerm_ungimuhw'[39m,
  slug: [32m'test_attributeterm_ungimuhw'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'woocommerce_rest_required_product_reference'[39m,
  message: [32m'Product ID or SKU is required.'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m3[39m,
  name: [32m'Test_attribute_ozvmprli'[39m,
  slug: [32m'pa_test_attribute_ozvmprli'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m21[39m,
  name: [32m'Test_attributeTerm_akzmxdsy'[39m,
  slug: [32m'test_attributeterm_akzmxdsy'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'woocommerce_rest_required_product_reference'[39m,
  message: [32m'Product ID or SKU is required.'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
]]>
</system-out>
</testcase>
</testsuite>
<testsuite name="v2/v1productAttribute.spec.ts" timestamp="1671996383548" hostname="" tests="1" failures="1" skipped="0" time="1.824" errors="0">
<testcase name="product attribute api test set default attribute" classname="v2/v1productAttribute.spec.ts › product attribute api test › set default attribute" time="1.824">
<failure message="v1productAttribute.spec.ts:27:10 set default attribute" type="FAILURE">
<![CDATA[  v2/v1productAttribute.spec.ts:27:10 › product attribute api test › set default attribute =========

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:40:31
]]>
</failure>
<system-out>
<![CDATA[ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m4[39m,
  name: [32m'Test_attribute_ihrjcndo'[39m,
  slug: [32m'pa_test_attribute_ihrjcndo'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m22[39m,
  name: [32m'Test_attributeTerm_jfuihuls'[39m,
  slug: [32m'test_attributeterm_jfuihuls'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m4[39m,
  name: [32m'Test_attribute_ihrjcndo'[39m,
  slug: [32m'pa_test_attribute_ihrjcndo'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m22[39m,
  name: [32m'Test_attributeTerm_jfuihuls'[39m,
  slug: [32m'test_attributeterm_jfuihuls'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
payload {
  id: [33m4[39m,
  name: [32m'Test_attribute_ihrjcndo'[39m,
  option: [32m'Test_attributeTerm_jfuihuls'[39m,
  options: []
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m5[39m,
  name: [32m'Test_attribute_eioavxqd'[39m,
  slug: [32m'pa_test_attribute_eioavxqd'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m23[39m,
  name: [32m'Test_attributeTerm_qimlaztc'[39m,
  slug: [32m'test_attributeterm_qimlaztc'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m5[39m,
  name: [32m'Test_attribute_eioavxqd'[39m,
  slug: [32m'pa_test_attribute_eioavxqd'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m23[39m,
  name: [32m'Test_attributeTerm_qimlaztc'[39m,
  slug: [32m'test_attributeterm_qimlaztc'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
payload {
  id: [33m5[39m,
  name: [32m'Test_attribute_eioavxqd'[39m,
  option: [32m'Test_attributeTerm_qimlaztc'[39m,
  options: []
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
ResponseBody:  {
  code: [32m'invalid_request'[39m,
  message: [32m'Error! Your account is not enabled for selling, please contact the admin'[39m,
  data: { status: [33m400[39m }
}
ResponseBody:  {
  id: [33m6[39m,
  name: [32m'Test_attribute_sxdgahim'[39m,
  slug: [32m'pa_test_attribute_sxdgahim'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m24[39m,
  name: [32m'Test_attributeTerm_siwdlrwx'[39m,
  slug: [32m'test_attributeterm_siwdlrwx'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m6[39m,
  name: [32m'Test_attribute_sxdgahim'[39m,
  slug: [32m'pa_test_attribute_sxdgahim'[39m,
  type: [32m'select'[39m,
  order_by: [32m'menu_order'[39m,
  has_archives: [33mfalse[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
ResponseBody:  {
  id: [33m24[39m,
  name: [32m'Test_attributeTerm_siwdlrwx'[39m,
  slug: [32m'test_attributeterm_siwdlrwx'[39m,
  description: [32m''[39m,
  menu_order: [33m0[39m,
  count: [33m0[39m,
  _links: { self: [ [36m[Object][39m ], collection: [ [36m[Object][39m ] }
}
payload {
  id: [33m6[39m,
  name: [32m'Test_attribute_sxdgahim'[39m,
  option: [32m'Test_attributeTerm_siwdlrwx'[39m,
  options: []
}
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
]]>
</system-out>
</testcase>
</testsuite>
</testsuites>