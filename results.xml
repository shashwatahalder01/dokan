<testsuites id="" name="" tests="198" failures="21" skipped="31" errors="0" time="76.551136">
<testsuite name="_setup.spec.ts" timestamp="1674208974426" hostname="" tests="3" failures="0" skipped="0" time="1.053" errors="0">
<testcase name=" api test setup test store settings" classname="_setup.spec.ts ›  api test › setup test store settings" time="0.545">
<system-out>
<![CDATA[http://localhost:8889?rest_route=/dokan/v1/settings
]]>
</system-out>
</testcase>
<testcase name=" api test create test customer" classname="_setup.spec.ts ›  api test › create test customer" time="0.289">
</testcase>
<testcase name=" api test create test vendor" classname="_setup.spec.ts ›  api test › create test vendor" time="0.219">
</testcase>
</testsuite>
<testsuite name="abuseReports.spec.ts" timestamp="1674208974426" hostname="" tests="4" failures="0" skipped="2" time="0.384" errors="0">
<testcase name="abuse report api test get all abuse report reasons @pro" classname="abuseReports.spec.ts › abuse report api test › get all abuse report reasons @pro" time="0.19">
</testcase>
<testcase name="abuse report api test get all abuse reports @pro" classname="abuseReports.spec.ts › abuse report api test › get all abuse reports @pro" time="0.194">
</testcase>
<testcase name="abuse report api test delete a abuse report @pro" classname="abuseReports.spec.ts › abuse report api test › delete a abuse report @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="abuse report api test delete batch abuse reports @pro" classname="abuseReports.spec.ts › abuse report api test › delete batch abuse reports @pro" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="admins.spec.ts" timestamp="1674208974426" hostname="" tests="10" failures="0" skipped="0" time="2.8" errors="0">
<testcase name="admin api test get admin report overview" classname="admins.spec.ts › admin api test › get admin report overview" time="0.176">
</testcase>
<testcase name="admin api test get admin report summary" classname="admins.spec.ts › admin api test › get admin report summary" time="0.185">
</testcase>
<testcase name="admin api test get admin dashboard feed" classname="admins.spec.ts › admin api test › get admin dashboard feed" time="0.384">
</testcase>
<testcase name="admin api test get admin help" classname="admins.spec.ts › admin api test › get admin help" time="0.637">
</testcase>
<testcase name="admin api test get changelog lite" classname="admins.spec.ts › admin api test › get changelog lite" time="0.186">
</testcase>
<testcase name="admin api test get changelog pro @pro" classname="admins.spec.ts › admin api test › get changelog pro @pro" time="0.197">
</testcase>
<testcase name="admin api test get getAdminNotices" classname="admins.spec.ts › admin api test › get getAdminNotices" time="0.177">
</testcase>
<testcase name="admin api test get admin promo notices " classname="admins.spec.ts › admin api test › get admin promo notices " time="0.493">
</testcase>
<testcase name="admin api test get admin logs @pro" classname="admins.spec.ts › admin api test › get admin logs @pro" time="0.19">
</testcase>
<testcase name="admin api test get admin export logs @pro" classname="admins.spec.ts › admin api test › get admin export logs @pro" time="0.175">
</testcase>
</testsuite>
<testsuite name="announcements.spec.ts" timestamp="1674208974426" hostname="" tests="7" failures="0" skipped="0" time="1.577" errors="0">
<testcase name="announcements api test get all announcements @pro" classname="announcements.spec.ts › announcements api test › get all announcements @pro" time="0.169">
</testcase>
<testcase name="announcements api test get single announcement @pro" classname="announcements.spec.ts › announcements api test › get single announcement @pro" time="0.167">
</testcase>
<testcase name="announcements api test create a announcement @pro" classname="announcements.spec.ts › announcements api test › create a announcement @pro" time="0.176">
</testcase>
<testcase name="announcements api test update a announcement @pro" classname="announcements.spec.ts › announcements api test › update a announcement @pro" time="0.177">
</testcase>
<testcase name="announcements api test delete a announcement @pro" classname="announcements.spec.ts › announcements api test › delete a announcement @pro" time="0.18">
</testcase>
<testcase name="announcements api test restore a deleted announcement  @pro" classname="announcements.spec.ts › announcements api test › restore a deleted announcement  @pro" time="0.178">
</testcase>
<testcase name="announcements api test update batch announcements @pro" classname="announcements.spec.ts › announcements api test › update batch announcements @pro" time="0.53">
</testcase>
</testsuite>
<testsuite name="calculation.spec.ts" timestamp="1674208974426" hostname="" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="calculation test calculation test" classname="calculation.spec.ts › calculation test › calculation test" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="coupons.spec.ts" timestamp="1674208974426" hostname="" tests="5" failures="0" skipped="0" time="0.877" errors="0">
<testcase name="coupon api test get all coupons" classname="coupons.spec.ts › coupon api test › get all coupons" time="0.168">
</testcase>
<testcase name="coupon api test get single coupon" classname="coupons.spec.ts › coupon api test › get single coupon" time="0.169">
</testcase>
<testcase name="coupon api test create a coupon" classname="coupons.spec.ts › coupon api test › create a coupon" time="0.189">
</testcase>
<testcase name="coupon api test update a coupon" classname="coupons.spec.ts › coupon api test › update a coupon" time="0.173">
</testcase>
<testcase name="coupon api test delete a coupon" classname="coupons.spec.ts › coupon api test › delete a coupon" time="0.178">
</testcase>
</testsuite>
<testsuite name="customers.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="0" time="1.271" errors="0">
<testcase name="customers api test get all customers" classname="customers.spec.ts › customers api test › get all customers" time="0.167">
</testcase>
<testcase name="customers api test get single customer" classname="customers.spec.ts › customers api test › get single customer" time="0.166">
</testcase>
<testcase name="customers api test create a customer" classname="customers.spec.ts › customers api test › create a customer" time="0.225">
</testcase>
<testcase name="customers api test update a customer" classname="customers.spec.ts › customers api test › update a customer" time="0.18">
</testcase>
<testcase name="customers api test delete a customer" classname="customers.spec.ts › customers api test › delete a customer" time="0.188">
</testcase>
<testcase name="customers api test update batch customers" classname="customers.spec.ts › customers api test › update batch customers" time="0.345">
</testcase>
</testsuite>
<testsuite name="dummyData.spec.ts" timestamp="1674208974426" hostname="" tests="3" failures="0" skipped="0" time="0.753" errors="0">
<testcase name="dummy Data api test get dummy data status" classname="dummyData.spec.ts › dummy Data api test › get dummy data status" time="0.165">
</testcase>
<testcase name="dummy Data api test import dummy data" classname="dummyData.spec.ts › dummy Data api test › import dummy data" time="0.316">
</testcase>
<testcase name="dummy Data api test clear dummy data" classname="dummyData.spec.ts › dummy Data api test › clear dummy data" time="0.272">
</testcase>
</testsuite>
<testsuite name="followStores.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="0" skipped="0" time="0.346" errors="0">
<testcase name="follow store api test get store follow status @pro" classname="followStores.spec.ts › follow store api test › get store follow status @pro" time="0.164">
</testcase>
<testcase name="follow store api test follow-unfollow a store @pro" classname="followStores.spec.ts › follow store api test › follow-unfollow a store @pro" time="0.182">
</testcase>
</testsuite>
<testsuite name="modules.spec.ts" timestamp="1674208974426" hostname="" tests="3" failures="0" skipped="0" time="0.548" errors="0">
<testcase name="modules api test get all modules" classname="modules.spec.ts › modules api test › get all modules" time="0.164">
</testcase>
<testcase name="modules api test deactivate a module" classname="modules.spec.ts › modules api test › deactivate a module" time="0.168">
</testcase>
<testcase name="modules api test activate a module" classname="modules.spec.ts › modules api test › activate a module" time="0.216">
</testcase>
</testsuite>
<testsuite name="orderNotes.spec.ts" timestamp="1674208974426" hostname="" tests="4" failures="0" skipped="0" time="0.695" errors="0">
<testcase name="order note api test get all order notes" classname="orderNotes.spec.ts › order note api test › get all order notes" time="0.168">
</testcase>
<testcase name="order note api test get single order note" classname="orderNotes.spec.ts › order note api test › get single order note" time="0.177">
</testcase>
<testcase name="order note api test create an order note" classname="orderNotes.spec.ts › order note api test › create an order note" time="0.171">
</testcase>
<testcase name="order note api test delete an order note" classname="orderNotes.spec.ts › order note api test › delete an order note" time="0.179">
</testcase>
</testsuite>
<testsuite name="orders.spec.ts" timestamp="1674208974426" hostname="" tests="5" failures="0" skipped="0" time="0.895" errors="0">
<testcase name="order api test get all orders" classname="orders.spec.ts › order api test › get all orders" time="0.178">
</testcase>
<testcase name="order api test get orders summary" classname="orders.spec.ts › order api test › get orders summary" time="0.165">
</testcase>
<testcase name="order api test get orders with before after" classname="orders.spec.ts › order api test › get orders with before after" time="0.177">
</testcase>
<testcase name="order api test get single order" classname="orders.spec.ts › order api test › get single order" time="0.173">
</testcase>
<testcase name="order api test update an order" classname="orders.spec.ts › order api test › update an order" time="0.202">
</testcase>
</testsuite>
<testsuite name="productAdvertisements.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="0" time="1.481" errors="0">
<testcase name="product advertisement api test get all advertised product stores @pro" classname="productAdvertisements.spec.ts › product advertisement api test › get all advertised product stores @pro" time="0.164">
</testcase>
<testcase name="product advertisement api test get all advertised product @pro" classname="productAdvertisements.spec.ts › product advertisement api test › get all advertised product @pro" time="0.167">
</testcase>
<testcase name="product advertisement api test create a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › create a product advertisement @pro" time="0.427">
</testcase>
<testcase name="product advertisement api test expire a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › expire a product advertisement @pro" time="0.18">
</testcase>
<testcase name="product advertisement api test delete a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › delete a product advertisement @pro" time="0.181">
</testcase>
<testcase name="product advertisement api test update batch product advertisements @pro" classname="productAdvertisements.spec.ts › product advertisement api test › update batch product advertisements @pro" time="0.362">
</testcase>
</testsuite>
<testsuite name="productAttributes.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="0" time="1.188" errors="0">
<testcase name="attribute api test get all attributes" classname="productAttributes.spec.ts › attribute api test › get all attributes" time="0.172">
</testcase>
<testcase name="attribute api test get single attribute" classname="productAttributes.spec.ts › attribute api test › get single attribute" time="0.171">
</testcase>
<testcase name="attribute api test create an attribute" classname="productAttributes.spec.ts › attribute api test › create an attribute" time="0.168">
</testcase>
<testcase name="attribute api test update an attribute" classname="productAttributes.spec.ts › attribute api test › update an attribute" time="0.173">
</testcase>
<testcase name="attribute api test delete an attribute" classname="productAttributes.spec.ts › attribute api test › delete an attribute" time="0.169">
</testcase>
<testcase name="attribute api test update batch attributes" classname="productAttributes.spec.ts › attribute api test › update batch attributes" time="0.335">
</testcase>
</testsuite>
<testsuite name="productAttributeTerms.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="0" time="1.2" errors="0">
<testcase name="attribute term api test get all attribute terms" classname="productAttributeTerms.spec.ts › attribute term api test › get all attribute terms" time="0.167">
</testcase>
<testcase name="attribute term api test get single attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › get single attribute term" time="0.181">
</testcase>
<testcase name="attribute term api test create an attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › create an attribute term" time="0.172">
</testcase>
<testcase name="attribute term api test update an attribute term " classname="productAttributeTerms.spec.ts › attribute term api test › update an attribute term " time="0.173">
</testcase>
<testcase name="attribute term api test delete an attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › delete an attribute term" time="0.171">
</testcase>
<testcase name="attribute term api test update batch attribute terms" classname="productAttributeTerms.spec.ts › attribute term api test › update batch attribute terms" time="0.336">
</testcase>
</testsuite>
<testsuite name="productReviews.spec.ts" timestamp="1674208974426" hostname="" tests="3" failures="0" skipped="0" time="0.509" errors="0">
<testcase name="product review api test get all product reviews" classname="productReviews.spec.ts › product review api test › get all product reviews" time="0.164">
</testcase>
<testcase name="product review api test get product reviews summary" classname="productReviews.spec.ts › product review api test › get product reviews summary" time="0.166">
</testcase>
<testcase name="product review api test update a product review" classname="productReviews.spec.ts › product review api test › update a product review" time="0.179">
</testcase>
</testsuite>
<testsuite name="products.spec.ts" timestamp="1674208974426" hostname="" tests="12" failures="0" skipped="0" time="2.259" errors="0">
<testcase name="product api test get products summary" classname="products.spec.ts › product api test › get products summary" time="0.165">
</testcase>
<testcase name="product api test get top rated products" classname="products.spec.ts › product api test › get top rated products" time="0.178">
</testcase>
<testcase name="product api test get best selling products" classname="products.spec.ts › product api test › get best selling products" time="0.196">
</testcase>
<testcase name="product api test get featured products" classname="products.spec.ts › product api test › get featured products" time="0.166">
</testcase>
<testcase name="product api test get latest products" classname="products.spec.ts › product api test › get latest products" time="0.192">
</testcase>
<testcase name="product api test get all multiStep categories" classname="products.spec.ts › product api test › get all multiStep categories" time="0.167">
</testcase>
<testcase name="product api test get all products" classname="products.spec.ts › product api test › get all products" time="0.181">
</testcase>
<testcase name="product api test get single product" classname="products.spec.ts › product api test › get single product" time="0.172">
</testcase>
<testcase name="product api test get all related products" classname="products.spec.ts › product api test › get all related products" time="0.191">
</testcase>
<testcase name="product api test create a product" classname="products.spec.ts › product api test › create a product" time="0.25">
</testcase>
<testcase name="product api test update a product" classname="products.spec.ts › product api test › update a product" time="0.194">
</testcase>
<testcase name="product api test delete a product" classname="products.spec.ts › product api test › delete a product" time="0.207">
</testcase>
</testsuite>
<testsuite name="productVariations.spec.ts" timestamp="1674208974426" hostname="" tests="5" failures="0" skipped="1" time="0.768" errors="0">
<testcase name="product variation api test get all product variations" classname="productVariations.spec.ts › product variation api test › get all product variations" time="0.173">
</testcase>
<testcase name="product variation api test get single product variation" classname="productVariations.spec.ts › product variation api test › get single product variation" time="0.171">
</testcase>
<testcase name="product variation api test create a product variation" classname="productVariations.spec.ts › product variation api test › create a product variation" time="0.221">
</testcase>
<testcase name="product variation api test update a product variation" classname="productVariations.spec.ts › product variation api test › update a product variation" time="0.203">
</testcase>
<testcase name="product variation api test delete a product variation" classname="productVariations.spec.ts › product variation api test › delete a product variation" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="quoteRequests.spec.ts" timestamp="1674208974426" hostname="" tests="8" failures="0" skipped="1" time="1.445" errors="0">
<testcase name="request quote api test get all request quotes @pro" classname="quoteRequests.spec.ts › request quote api test › get all request quotes @pro" time="0.166">
</testcase>
<testcase name="request quote api test get single request quote @pro" classname="quoteRequests.spec.ts › request quote api test › get single request quote @pro" time="0.172">
</testcase>
<testcase name="request quote api test create a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › create a request quote @pro" time="0.199">
</testcase>
<testcase name="request quote api test update a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › update a request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test delete a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › delete a request quote @pro" time="0.166">
</testcase>
<testcase name="request quote api test restore a deleted request quote @pro" classname="quoteRequests.spec.ts › request quote api test › restore a deleted request quote @pro" time="0.168">
</testcase>
<testcase name="request quote api test convert request quote to order @pro" classname="quoteRequests.spec.ts › request quote api test › convert request quote to order @pro" time="0.245">
</testcase>
<testcase name="request quote api test update batch request quote @pro " classname="quoteRequests.spec.ts › request quote api test › update batch request quote @pro " time="0.329">
</testcase>
</testsuite>
<testsuite name="quoteRules.spec.ts" timestamp="1674208974426" hostname="" tests="7" failures="0" skipped="0" time="1.334" errors="0">
<testcase name="quote rules api test get all quote rules @pro" classname="quoteRules.spec.ts › quote rules api test › get all quote rules @pro" time="0.166">
</testcase>
<testcase name="quote rules api test get single quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › get single quote rule @pro" time="0.166">
</testcase>
<testcase name="quote rules api test create a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › create a quote rule @pro" time="0.168">
</testcase>
<testcase name="quote rules api test update a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › update a quote rule @pro" time="0.165">
</testcase>
<testcase name="quote rules api test delete a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › delete a quote rule @pro" time="0.165">
</testcase>
<testcase name="quote rules api test restore a deleted quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › restore a deleted quote rule @pro" time="0.176">
</testcase>
<testcase name="quote rules api test update batch quote rules @pro" classname="quoteRules.spec.ts › quote rules api test › update batch quote rules @pro" time="0.328">
</testcase>
</testsuite>
<testsuite name="refunds.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="6" time="0" errors="0">
<testcase name="refunds api test get all refunds @pro" classname="refunds.spec.ts › refunds api test › get all refunds @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test get all refunds by status @pro" classname="refunds.spec.ts › refunds api test › get all refunds by status @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test approve a refund @pro" classname="refunds.spec.ts › refunds api test › approve a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test cancel a refund @pro" classname="refunds.spec.ts › refunds api test › cancel a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test delete a refund @pro" classname="refunds.spec.ts › refunds api test › delete a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test update batch refunds @pro" classname="refunds.spec.ts › refunds api test › update batch refunds @pro" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reports.spec.ts" timestamp="1674208974426" hostname="" tests="4" failures="0" skipped="0" time="0.689" errors="0">
<testcase name="report api test get sales overview report" classname="reports.spec.ts › report api test › get sales overview report" time="0.169">
</testcase>
<testcase name="report api test get summary report" classname="reports.spec.ts › report api test › get summary report" time="0.167">
</testcase>
<testcase name="report api test get top earners report" classname="reports.spec.ts › report api test › get top earners report" time="0.176">
</testcase>
<testcase name="report api test get top selling products report " classname="reports.spec.ts › report api test › get top selling products report " time="0.177">
</testcase>
</testsuite>
<testsuite name="reverseWithdrawal.spec.ts" timestamp="1674208974426" hostname="" tests="4" failures="0" skipped="3" time="0.164" errors="0">
<testcase name="reverse withdrawal api test get reverse withdrawal transaction types" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get reverse withdrawal transaction types" time="0.164">
</testcase>
<testcase name="reverse withdrawal api test get all reverse withdrawal stores" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get all reverse withdrawal stores" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="reverse withdrawal api test get all reverse withdrawal store balance" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get all reverse withdrawal store balance" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="reverse withdrawal api test getAllReverseWithdrawalTransactions" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › getAllReverseWithdrawalTransactions" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="roles.spec.ts" timestamp="1674208974426" hostname="" tests="1" failures="0" skipped="0" time="0.164" errors="0">
<testcase name="roles api test get all user roles " classname="roles.spec.ts › roles api test › get all user roles " time="0.164">
</testcase>
</testsuite>
<testsuite name="settings.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="0" skipped="0" time="0.349" errors="0">
<testcase name="settings api test get settings" classname="settings.spec.ts › settings api test › get settings" time="0.173">
</testcase>
<testcase name="settings api test update settings" classname="settings.spec.ts › settings api test › update settings" time="0.176">
</testcase>
</testsuite>
<testsuite name="storeCategories.spec.ts" timestamp="1674208974426" hostname="" tests="7" failures="0" skipped="7" time="0" errors="0">
<testcase name="store categories api test get default store category @pro" classname="storeCategories.spec.ts › store categories api test › get default store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test get all store categories @pro" classname="storeCategories.spec.ts › store categories api test › get all store categories @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test get single store category @pro" classname="storeCategories.spec.ts › store categories api test › get single store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test create a store category @pro" classname="storeCategories.spec.ts › store categories api test › create a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test update a store category @pro" classname="storeCategories.spec.ts › store categories api test › update a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test delete a store category @pro" classname="storeCategories.spec.ts › store categories api test › delete a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test set default store category @pro" classname="storeCategories.spec.ts › store categories api test › set default store category @pro" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="storeReviews.spec.ts" timestamp="1674208974426" hostname="" tests="6" failures="0" skipped="0" time="1.376" errors="0">
<testcase name="store reviews api test get all store reviews @pro" classname="storeReviews.spec.ts › store reviews api test › get all store reviews @pro" time="0.165">
</testcase>
<testcase name="store reviews api test get single store review @pro" classname="storeReviews.spec.ts › store reviews api test › get single store review @pro" time="0.166">
</testcase>
<testcase name="store reviews api test update a store review @pro" classname="storeReviews.spec.ts › store reviews api test › update a store review @pro" time="0.17">
</testcase>
<testcase name="store reviews api test delete a store review  @pro" classname="storeReviews.spec.ts › store reviews api test › delete a store review  @pro" time="0.176">
</testcase>
<testcase name="store reviews api test restore a deleted store review  @pro" classname="storeReviews.spec.ts › store reviews api test › restore a deleted store review  @pro" time="0.176">
</testcase>
<testcase name="store reviews api test update batch store review @pro" classname="storeReviews.spec.ts › store reviews api test › update batch store review @pro" time="0.523">
</testcase>
</testsuite>
<testsuite name="stores.spec.ts" timestamp="1674208974426" hostname="" tests="16" failures="0" skipped="0" time="3.699" errors="0">
<testcase name="stores api test get store availability status" classname="stores.spec.ts › stores api test › get store availability status" time="0.174">
</testcase>
<testcase name="stores api test get all stores" classname="stores.spec.ts › stores api test › get all stores" time="0.171">
</testcase>
<testcase name="stores api test get single store" classname="stores.spec.ts › stores api test › get single store" time="0.18">
</testcase>
<testcase name="stores api test create a store" classname="stores.spec.ts › stores api test › create a store" time="0.193">
</testcase>
<testcase name="stores api test update a store" classname="stores.spec.ts › stores api test › update a store" time="0.177">
</testcase>
<testcase name="stores api test delete a store" classname="stores.spec.ts › stores api test › delete a store" time="0.383">
</testcase>
<testcase name="stores api test get store current visitor" classname="stores.spec.ts › stores api test › get store current visitor" time="0.172">
</testcase>
<testcase name="stores api test get store stats" classname="stores.spec.ts › stores api test › get store stats" time="0.179">
</testcase>
<testcase name="stores api test get store categories" classname="stores.spec.ts › stores api test › get store categories" time="0.167">
</testcase>
<testcase name="stores api test get store products" classname="stores.spec.ts › stores api test › get store products" time="0.617">
</testcase>
<testcase name="stores api test get store reviews" classname="stores.spec.ts › stores api test › get store reviews" time="0.168">
</testcase>
<testcase name="stores api test create a store review" classname="stores.spec.ts › stores api test › create a store review" time="0.174">
</testcase>
<testcase name="stores api test update a store status" classname="stores.spec.ts › stores api test › update a store status" time="0.184">
</testcase>
<testcase name="stores api test admin contact store" classname="stores.spec.ts › stores api test › admin contact store" time="0.177">
</testcase>
<testcase name="stores api test admin email store" classname="stores.spec.ts › stores api test › admin email store" time="0.168">
</testcase>
<testcase name="stores api test update batch stores" classname="stores.spec.ts › stores api test › update batch stores" time="0.415">
</testcase>
</testsuite>
<testsuite name="supportTickets.spec.ts" timestamp="1674208974426" hostname="" tests="8" failures="0" skipped="8" time="0" errors="0">
<testcase name="support ticket api test get all support ticket customers" classname="supportTickets.spec.ts › support ticket api test › get all support ticket customers" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test get all support tickets" classname="supportTickets.spec.ts › support ticket api test › get all support tickets" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test get single support ticket" classname="supportTickets.spec.ts › support ticket api test › get single support ticket" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test create a support ticket comment" classname="supportTickets.spec.ts › support ticket api test › create a support ticket comment" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update support ticket status" classname="supportTickets.spec.ts › support ticket api test › update support ticket status" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update a support ticket email notification" classname="supportTickets.spec.ts › support ticket api test › update a support ticket email notification" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test delete a support ticket comment" classname="supportTickets.spec.ts › support ticket api test › delete a support ticket comment" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update batch support tickets" classname="supportTickets.spec.ts › support ticket api test › update batch support tickets" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/orderDownloads.spec.ts" timestamp="1674208974426" hostname="" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="order downloads api test get all order downloads @v2" classname="v2/orderDownloads.spec.ts › order downloads api test › get all order downloads @v2" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/orders.spec.ts" timestamp="1674208974426" hostname="" tests="1" failures="1" skipped="0" time="0.367" errors="0">
<testcase name="orders api test update batch orders @v2" classname="v2/orders.spec.ts › orders api test › update batch orders @v2" time="0.367">
<failure message="orders.spec.ts:23:9 update batch orders @v2" type="FAILURE">
<![CDATA[  v2/orders.spec.ts:23:9 › orders api test › update batch orders @v2 ===============================

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.post(endPoints.updateBatchOrders, { data: { order_ids: allOrderIds, status: "wc-completed" } })
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orders.spec.ts:29:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/productFilter.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="0" skipped="0" time="0.361" errors="0">
<testcase name="product filter api test get products filter by data @v2" classname="v2/productFilter.spec.ts › product filter api test › get products filter by data @v2" time="0.187">
</testcase>
<testcase name="product filter api test get filtered products @v2" classname="v2/productFilter.spec.ts › product filter api test › get filtered products @v2" time="0.174">
</testcase>
</testsuite>
<testsuite name="v2/setttingsGroup.spec.ts" timestamp="1674208974426" hostname="" tests="7" failures="7" skipped="0" time="1.496" errors="0">
<testcase name="new settings api test get store settings @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get store settings @v2" time="0.17">
<failure message="setttingsGroup.spec.ts:25:9 get store settings @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:25:9 › new settings api test › get store settings @v2 ==================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get single setting group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get single setting group @v2" time="0.215">
<failure message="setttingsGroup.spec.ts:31:9 get single setting group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:31:9 › new settings api test › get single setting group @v2 ============

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getSingleSettingGroup('store'))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('update single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:34:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update single setting group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update single setting group @v2" time="0.23">
<failure message="setttingsGroup.spec.ts:37:9 update single setting group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:37:9 › new settings api test › update single setting group @v2 =========

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.updateSingleSettingGroup('store'), { data: payloads.updateSettingsGroup })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get sub settings from single settings group @v2" time="0.212">
<failure message="setttingsGroup.spec.ts:43:9 get sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:43:9 › new settings api test › get sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSubSettingFromSingleSettingGroup('store', 'store_name'))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update sub settings from single settings group @v2" time="0.225">
<failure message="setttingsGroup.spec.ts:49:9 update sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:49:9 › new settings api test › update sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.post(endPoints.updateSubSettingFromSingleSettingGroup('store', 'store_name'), { data: payloads.updateSubSettingFromSingleSettingGroup })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get sub sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get sub sub settings from single settings group @v2" time="0.219">
<failure message="setttingsGroup.spec.ts:55:9 get sub sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:55:9 › new settings api test › get sub sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('update sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:58:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update sub sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update sub sub settings from single settings group @v2" time="0.225">
<failure message="setttingsGroup.spec.ts:61:9 update sub sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:61:9 › new settings api test › update sub sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.post(endPoints.updateSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'), { data: payloads.updateSubSubSettingFromSingleSettingGroup })
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:64:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1productAttribute.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="2" skipped="0" time="0.342" errors="0">
<testcase name="product attribute api test set default attribute" classname="v2/v1productAttribute.spec.ts › product attribute api test › set default attribute" time="0.172">
<failure message="v1productAttribute.spec.ts:31:9 set default attribute" type="FAILURE">
<![CDATA[  v2/v1productAttribute.spec.ts:31:9 › product attribute api test › set default attribute ==========

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:41:31
]]>
</failure>
</testcase>
<testcase name="product attribute api test update product attribute" classname="v2/v1productAttribute.spec.ts › product attribute api test › update product attribute" time="0.17">
<failure message="v1productAttribute.spec.ts:44:9 update product attribute" type="FAILURE">
<![CDATA[  v2/v1productAttribute.spec.ts:44:9 › product attribute api test › update product attribute =======

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.post(endPoints.updateProductAttribute(productId), { data: payload })
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:68:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1productBlock.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="2" skipped="0" time="0.34" errors="0">
<testcase name="product block api test get product block details" classname="v2/v1productBlock.spec.ts › product block api test › get product block details" time="0.169">
<failure message="v1productBlock.spec.ts:25:9 get product block details" type="FAILURE">
<![CDATA[  v2/v1productBlock.spec.ts:25:9 › product block api test › get product block details ==============

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getProductBlockDetails(productId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get variable product block details', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="product block api test get variable product block details" classname="v2/v1productBlock.spec.ts › product block api test › get variable product block details" time="0.171">
<failure message="v1productBlock.spec.ts:31:9 get variable product block details" type="FAILURE">
<![CDATA[  v2/v1productBlock.spec.ts:31:9 › product block api test › get variable product block details =====

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getProductBlockDetails(variationId))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:34:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1rankMath.spec.ts" timestamp="1674208974426" hostname="" tests="1" failures="0" skipped="1" time="0.001" errors="0">
<testcase name="rank math api test rank math" classname="v2/v1rankMath.spec.ts › rank math api test › rank math" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/v1vendorDashborad.spec.ts" timestamp="1674208974426" hostname="" tests="7" failures="7" skipped="0" time="1.493" errors="0">
<testcase name="vendor dashboard api test get vendor dashboard statistics" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor dashboard statistics" time="0.206">
<failure message="v1vendorDashborad.spec.ts:19:9 get vendor dashboard statistics" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:19:9 › vendor dashboard api test › get vendor dashboard statistics ==

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getVendorDashboardStatistics)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get vendor profile information', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor profile information" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor profile information" time="0.208">
<failure message="v1vendorDashborad.spec.ts:25:9 get vendor profile information" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:25:9 › vendor dashboard api test › get vendor profile information ===

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getVendorProfileInformation)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get vendor sales report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor sales report" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor sales report" time="0.219">
<failure message="v1vendorDashborad.spec.ts:31:9 get vendor sales report" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:31:9 › vendor dashboard api test › get vendor sales report ==========

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getVendorSalesReport)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get vendor product reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:34:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor product reports summary" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor product reports summary" time="0.211">
<failure message="v1vendorDashborad.spec.ts:37:9 get vendor product reports summary" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:37:9 › vendor dashboard api test › get vendor product reports summary 

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getVendorProductReportsSummary)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get vendor order reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor order reports summary" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor order reports summary" time="0.21">
<failure message="v1vendorDashborad.spec.ts:43:9 get vendor order reports summary" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:43:9 › vendor dashboard api test › get vendor order reports summary =

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getVendorOrderReportsSummary)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get vendor store preferences', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor store preferences" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor store preferences" time="0.213">
<failure message="v1vendorDashborad.spec.ts:49:9 get vendor store preferences" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:49:9 › vendor dashboard api test › get vendor store preferences =====

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getVendorStorePreferences)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get vendor profile progress bar data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor profile progress bar data" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor profile progress bar data" time="0.226">
<failure message="v1vendorDashborad.spec.ts:55:9 get vendor profile progress bar data" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:55:9 › vendor dashboard api test › get vendor profile progress bar data 

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getVendorProfileProgressBarData)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:58:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/withdraw.spec.ts" timestamp="1674208974426" hostname="" tests="2" failures="2" skipped="0" time="0.43" errors="0">
<testcase name="withdraw api test get withdraw settings @v2" classname="v2/withdraw.spec.ts › withdraw api test › get withdraw settings @v2" time="0.219">
<failure message="withdraw.spec.ts:19:9 get withdraw settings @v2" type="FAILURE">
<![CDATA[  v2/withdraw.spec.ts:19:9 › withdraw api test › get withdraw settings @v2 =========================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getWithdrawSettings)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get withdraw summary @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test get withdraw summary @v2" classname="v2/withdraw.spec.ts › withdraw api test › get withdraw summary @v2" time="0.211">
<failure message="withdraw.spec.ts:25:9 get withdraw summary @v2" type="FAILURE">
<![CDATA[  v2/withdraw.spec.ts:25:9 › withdraw api test › get withdraw summary @v2 ==========================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getWithdrawSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:28:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="wholesaleCustomers.spec.ts" timestamp="1674208974426" hostname="" tests="5" failures="0" skipped="0" time="1.269" errors="0">
<testcase name="wholesale customers api test get all wholesale customers @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › get all wholesale customers @pro" time="0.174">
</testcase>
<testcase name="wholesale customers api test create a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › create a wholesale customer @pro" time="0.403">
</testcase>
<testcase name="wholesale customers api test update a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › update a wholesale customer @pro" time="0.175">
</testcase>
<testcase name="wholesale customers api test delete a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › delete a wholesale customer @pro" time="0.175">
</testcase>
<testcase name="wholesale customers api test update batch wholesale customers @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › update batch wholesale customers @pro" time="0.342">
</testcase>
</testsuite>
<testsuite name="withdraws.spec.ts" timestamp="1674208974426" hostname="" tests="8" failures="0" skipped="0" time="1.73" errors="0">
<testcase name="withdraw api test get balance details" classname="withdraws.spec.ts › withdraw api test › get balance details" time="0.175">
</testcase>
<testcase name="withdraw api test get all withdraws" classname="withdraws.spec.ts › withdraw api test › get all withdraws" time="0.169">
</testcase>
<testcase name="withdraw api test get all withdraws by status" classname="withdraws.spec.ts › withdraw api test › get all withdraws by status" time="0.169">
</testcase>
<testcase name="withdraw api test get single withdraw" classname="withdraws.spec.ts › withdraw api test › get single withdraw" time="0.191">
</testcase>
<testcase name="withdraw api test update a withdraw" classname="withdraws.spec.ts › withdraw api test › update a withdraw" time="0.189">
</testcase>
<testcase name="withdraw api test cancel a withdraw" classname="withdraws.spec.ts › withdraw api test › cancel a withdraw" time="0.17">
</testcase>
<testcase name="withdraw api test update batch withdraws" classname="withdraws.spec.ts › withdraw api test › update batch withdraws" time="0.331">
</testcase>
<testcase name="withdraw api test create a withdraw" classname="withdraws.spec.ts › withdraw api test › create a withdraw" time="0.336">
</testcase>
</testsuite>
</testsuites>