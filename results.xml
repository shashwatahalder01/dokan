<testsuites id="" name="" tests="198" failures="141" skipped="44" errors="0" time="676.9579689999999">
<testsuite name="_setup.spec.ts" timestamp="1674073035097" hostname="" tests="3" failures="3" skipped="0" time="1.824" errors="0">
<testcase name=" api test setup test store settings" classname="_setup.spec.ts ›  api test › setup test store settings" time="0.776">
<failure message="_setup.spec.ts:19:9 setup test store settings" type="FAILURE">
<![CDATA[  _setup.spec.ts:19:9 ›  api test › setup test store settings ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.put(endPoints.updateSettings, { data: payloads.setupStore })
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('create test customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.put(endPoints.updateSettings, { data: payloads.setupStore })
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('create test customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.put(endPoints.updateSettings, { data: payloads.setupStore })
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('create test customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name=" api test create test customer" classname="_setup.spec.ts ›  api test › create test customer" time="0.531">
<failure message="_setup.spec.ts:25:9 create test customer" type="FAILURE">
<![CDATA[  _setup.spec.ts:25:9 ›  api test › create test customer ===========================================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer1 })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         responseBody.code === 'registration-error-email-exists' ? expect(response.status()).toBe(400) : expect(response.ok()).toBeTruthy()
         |                                                                                                                               ^
      29 |     });
      30 |
      31 |     test('create test vendor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:28:127

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer1 })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         responseBody.code === 'registration-error-email-exists' ? expect(response.status()).toBe(400) : expect(response.ok()).toBeTruthy()
         |                                                                                                                               ^
      29 |     });
      30 |
      31 |     test('create test vendor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:28:127

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer1 })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         responseBody.code === 'registration-error-email-exists' ? expect(response.status()).toBe(400) : expect(response.ok()).toBeTruthy()
         |                                                                                                                               ^
      29 |     });
      30 |
      31 |     test('create test vendor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:28:127
]]>
</failure>
</testcase>
<testcase name=" api test create test vendor" classname="_setup.spec.ts ›  api test › create test vendor" time="0.517">
<failure message="_setup.spec.ts:31:9 create test vendor" type="FAILURE">
<![CDATA[  _setup.spec.ts:31:9 ›  api test › create test vendor =============================================

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore1 })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         responseBody.code === 'existing_user_login' ? expect(response.status()).toBe(500) : expect(response.ok()).toBeTruthy()
         |                                                                                                                   ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:34:115

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore1 })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         responseBody.code === 'existing_user_login' ? expect(response.status()).toBe(500) : expect(response.ok()).toBeTruthy()
         |                                                                                                                   ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:34:115

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore1 })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         responseBody.code === 'existing_user_login' ? expect(response.status()).toBe(500) : expect(response.ok()).toBeTruthy()
         |                                                                                                                   ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:34:115
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="abuseReports.spec.ts" timestamp="1674073035097" hostname="" tests="4" failures="2" skipped="2" time="0.979" errors="0">
<testcase name="abuse report api test get all abuse report reasons @pro" classname="abuseReports.spec.ts › abuse report api test › get all abuse report reasons @pro" time="0.484">
<failure message="abuseReports.spec.ts:18:9 get all abuse report reasons @pro" type="FAILURE">
<![CDATA[  abuseReports.spec.ts:18:9 › abuse report api test › get all abuse report reasons @pro ============

    Error: expect(received).toBeTruthy()

    Received: false

      19 |         let response = await request.get(endPoints.getAllAbuseReportReasons)
      20 |         let responseBody = await apiUtils.getResponseBody(response)
    > 21 |         expect(response.ok()).toBeTruthy()
         |                               ^
      22 |     });
      23 |
      24 |     test('get all abuse reports @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:21:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      19 |         let response = await request.get(endPoints.getAllAbuseReportReasons)
      20 |         let responseBody = await apiUtils.getResponseBody(response)
    > 21 |         expect(response.ok()).toBeTruthy()
         |                               ^
      22 |     });
      23 |
      24 |     test('get all abuse reports @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:21:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      19 |         let response = await request.get(endPoints.getAllAbuseReportReasons)
      20 |         let responseBody = await apiUtils.getResponseBody(response)
    > 21 |         expect(response.ok()).toBeTruthy()
         |                               ^
      22 |     });
      23 |
      24 |     test('get all abuse reports @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:21:31
]]>
</failure>
</testcase>
<testcase name="abuse report api test get all abuse reports @pro" classname="abuseReports.spec.ts › abuse report api test › get all abuse reports @pro" time="0.49">
<failure message="abuseReports.spec.ts:24:9 get all abuse reports @pro" type="FAILURE">
<![CDATA[  abuseReports.spec.ts:24:9 › abuse report api test › get all abuse reports @pro ===================

    Error: expect(received).toBeTruthy()

    Received: false

      25 |         let response = await request.get(endPoints.getAllAbuseReports)
      26 |         let responseBody = await apiUtils.getResponseBody(response)
    > 27 |         expect(response.ok()).toBeTruthy()
         |                               ^
      28 |     });
      29 |
      30 |     test.skip('delete a abuse report @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:27:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      25 |         let response = await request.get(endPoints.getAllAbuseReports)
      26 |         let responseBody = await apiUtils.getResponseBody(response)
    > 27 |         expect(response.ok()).toBeTruthy()
         |                               ^
      28 |     });
      29 |
      30 |     test.skip('delete a abuse report @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:27:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      25 |         let response = await request.get(endPoints.getAllAbuseReports)
      26 |         let responseBody = await apiUtils.getResponseBody(response)
    > 27 |         expect(response.ok()).toBeTruthy()
         |                               ^
      28 |     });
      29 |
      30 |     test.skip('delete a abuse report @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/abuseReports.spec.ts:27:31
]]>
</failure>
</testcase>
<testcase name="abuse report api test delete a abuse report @pro" classname="abuseReports.spec.ts › abuse report api test › delete a abuse report @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="abuse report api test delete batch abuse reports @pro" classname="abuseReports.spec.ts › abuse report api test › delete batch abuse reports @pro" time="0.005">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="admins.spec.ts" timestamp="1674073035097" hostname="" tests="10" failures="10" skipped="0" time="4.795" errors="0">
<testcase name="admin api test get admin report overview" classname="admins.spec.ts › admin api test › get admin report overview" time="0.474">
<failure message="admins.spec.ts:19:9 get admin report overview" type="FAILURE">
<![CDATA[  admins.spec.ts:19:9 › admin api test › get admin report overview =================================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAdminReportOverview)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get admin report summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAdminReportOverview)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get admin report summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAdminReportOverview)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get admin report summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin report summary" classname="admins.spec.ts › admin api test › get admin report summary" time="0.481">
<failure message="admins.spec.ts:25:9 get admin report summary" type="FAILURE">
<![CDATA[  admins.spec.ts:25:9 › admin api test › get admin report summary ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAdminReportSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get admin dashboard feed', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAdminReportSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get admin dashboard feed', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAdminReportSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get admin dashboard feed', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin dashboard feed" classname="admins.spec.ts › admin api test › get admin dashboard feed" time="0.481">
<failure message="admins.spec.ts:31:9 get admin dashboard feed" type="FAILURE">
<![CDATA[  admins.spec.ts:31:9 › admin api test › get admin dashboard feed ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getAdminDashboardFeed)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get admin help', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getAdminDashboardFeed)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get admin help', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getAdminDashboardFeed)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get admin help', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:34:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin help" classname="admins.spec.ts › admin api test › get admin help" time="0.488">
<failure message="admins.spec.ts:37:9 get admin help" type="FAILURE">
<![CDATA[  admins.spec.ts:37:9 › admin api test › get admin help ============================================

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getAdminHelp)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get changelog lite', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getAdminHelp)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get changelog lite', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getAdminHelp)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get changelog lite', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="admin api test get changelog lite" classname="admins.spec.ts › admin api test › get changelog lite" time="0.479">
<failure message="admins.spec.ts:43:9 get changelog lite" type="FAILURE">
<![CDATA[  admins.spec.ts:43:9 › admin api test › get changelog lite ========================================

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getAdminChangelogLite)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get changelog pro @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getAdminChangelogLite)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get changelog pro @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getAdminChangelogLite)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get changelog pro @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="admin api test get changelog pro @pro" classname="admins.spec.ts › admin api test › get changelog pro @pro" time="0.482">
<failure message="admins.spec.ts:49:9 get changelog pro @pro" type="FAILURE">
<![CDATA[  admins.spec.ts:49:9 › admin api test › get changelog pro @pro ====================================

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getAdminChangelogPro)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get getAdminNotices', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:52:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getAdminChangelogPro)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get getAdminNotices', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:52:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getAdminChangelogPro)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get getAdminNotices', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="admin api test get getAdminNotices" classname="admins.spec.ts › admin api test › get getAdminNotices" time="0.477">
<failure message="admins.spec.ts:55:9 get getAdminNotices" type="FAILURE">
<![CDATA[  admins.spec.ts:55:9 › admin api test › get getAdminNotices =======================================

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getAdminNotices)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('get admin promo notices ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:58:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getAdminNotices)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('get admin promo notices ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:58:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getAdminNotices)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('get admin promo notices ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:58:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin promo notices " classname="admins.spec.ts › admin api test › get admin promo notices " time="0.48">
<failure message="admins.spec.ts:61:9 get admin promo notices " type="FAILURE">
<![CDATA[  admins.spec.ts:61:9 › admin api test › get admin promo notices  ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.get(endPoints.getAdminPromoNotices)
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 |     test('get admin logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:64:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.get(endPoints.getAdminPromoNotices)
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 |     test('get admin logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:64:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.get(endPoints.getAdminPromoNotices)
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 |     test('get admin logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:64:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin logs @pro" classname="admins.spec.ts › admin api test › get admin logs @pro" time="0.47">
<failure message="admins.spec.ts:67:9 get admin logs @pro" type="FAILURE">
<![CDATA[  admins.spec.ts:67:9 › admin api test › get admin logs @pro =======================================

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.get(endPoints.getAdminLogs)
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('get admin export logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:70:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.get(endPoints.getAdminLogs)
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('get admin export logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:70:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.get(endPoints.getAdminLogs)
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('get admin export logs @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:70:31
]]>
</failure>
</testcase>
<testcase name="admin api test get admin export logs @pro" classname="admins.spec.ts › admin api test › get admin export logs @pro" time="0.483">
<failure message="admins.spec.ts:73:9 get admin export logs @pro" type="FAILURE">
<![CDATA[  admins.spec.ts:73:9 › admin api test › get admin export logs @pro ================================

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAdminExportLogs)
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:76:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAdminExportLogs)
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:76:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAdminExportLogs)
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/admins.spec.ts:76:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="announcements.spec.ts" timestamp="1674073035097" hostname="" tests="7" failures="7" skipped="0" time="2.563" errors="0">
<testcase name="announcements api test get all announcements @pro" classname="announcements.spec.ts › announcements api test › get all announcements @pro" time="0.376">
<failure message="announcements.spec.ts:21:9 get all announcements @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:21:9 › announcements api test › get all announcements @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getAllAnnouncements)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get single announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:24:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getAllAnnouncements)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get single announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:24:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getAllAnnouncements)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get single announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:24:31
]]>
</failure>
</testcase>
<testcase name="announcements api test get single announcement @pro" classname="announcements.spec.ts › announcements api test › get single announcement @pro" time="0.366">
<failure message="announcements.spec.ts:27:9 get single announcement @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:27:9 › announcements api test › get single announcement @pro ===============

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getSingleAnnouncement(announcementId))
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('create a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:32:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getSingleAnnouncement(announcementId))
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('create a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:32:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getSingleAnnouncement(announcementId))
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('create a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:32:31
]]>
</failure>
</testcase>
<testcase name="announcements api test create a announcement @pro" classname="announcements.spec.ts › announcements api test › create a announcement @pro" time="0.368">
<failure message="announcements.spec.ts:35:9 create a announcement @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:35:9 › announcements api test › create a announcement @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.post(endPoints.createAnnouncement, { data: payloads.createAnnouncement })
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:38:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.post(endPoints.createAnnouncement, { data: payloads.createAnnouncement })
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:38:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.post(endPoints.createAnnouncement, { data: payloads.createAnnouncement })
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:38:31
]]>
</failure>
</testcase>
<testcase name="announcements api test update a announcement @pro" classname="announcements.spec.ts › announcements api test › update a announcement @pro" time="0.371">
<failure message="announcements.spec.ts:41:9 update a announcement @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:41:9 › announcements api test › update a announcement @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.updateAnnouncement(announcementId), { data: payloads.updateAnnouncement })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('delete a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.updateAnnouncement(announcementId), { data: payloads.updateAnnouncement })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('delete a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.updateAnnouncement(announcementId), { data: payloads.updateAnnouncement })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('delete a announcement @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="announcements api test delete a announcement @pro" classname="announcements.spec.ts › announcements api test › delete a announcement @pro" time="0.368">
<failure message="announcements.spec.ts:49:9 delete a announcement @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:49:9 › announcements api test › delete a announcement @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.delete(endPoints.deleteAnnouncement(announcementId))
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('restore a deleted announcement  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:54:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.delete(endPoints.deleteAnnouncement(announcementId))
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('restore a deleted announcement  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:54:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.delete(endPoints.deleteAnnouncement(announcementId))
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('restore a deleted announcement  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:54:31
]]>
</failure>
</testcase>
<testcase name="announcements api test restore a deleted announcement  @pro" classname="announcements.spec.ts › announcements api test › restore a deleted announcement  @pro" time="0.361">
<failure message="announcements.spec.ts:57:9 restore a deleted announcement  @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:57:9 › announcements api test › restore a deleted announcement  @pro =======

    Error: expect(received).toBeTruthy()

    Received: false

      61 |         let response = await request.put(endPoints.restoreDeletedAnnouncement(announcementId))
      62 |         let responseBody = await apiUtils.getResponseBody(response)
    > 63 |         expect(response.ok()).toBeTruthy()
         |                               ^
      64 |     });
      65 |
      66 |     test('update batch announcements @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:63:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      61 |         let response = await request.put(endPoints.restoreDeletedAnnouncement(announcementId))
      62 |         let responseBody = await apiUtils.getResponseBody(response)
    > 63 |         expect(response.ok()).toBeTruthy()
         |                               ^
      64 |     });
      65 |
      66 |     test('update batch announcements @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:63:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      61 |         let response = await request.put(endPoints.restoreDeletedAnnouncement(announcementId))
      62 |         let responseBody = await apiUtils.getResponseBody(response)
    > 63 |         expect(response.ok()).toBeTruthy()
         |                               ^
      64 |     });
      65 |
      66 |     test('update batch announcements @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:63:31
]]>
</failure>
</testcase>
<testcase name="announcements api test update batch announcements @pro" classname="announcements.spec.ts › announcements api test › update batch announcements @pro" time="0.353">
<failure message="announcements.spec.ts:66:9 update batch announcements @pro" type="FAILURE">
<![CDATA[  announcements.spec.ts:66:9 › announcements api test › update batch announcements @pro ============

    TypeError: (intermediate value).map is not a function

      67 |         // let [, announcementId] = await apiUtils.createAnnouncement(payloads.createAnnouncement)
      68 |
    > 69 |         let allAnnouncementIds = (await apiUtils.getAllAnnouncements()).map((a: { id: any }) => a.id)
         |                                                                         ^
      70 |         // console.log(allAnnouncementIds)
      71 |         
      72 |         let response = await request.put(endPoints.updateBatchAnnouncements, { data: { trash: allAnnouncementIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:69:73

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      67 |         // let [, announcementId] = await apiUtils.createAnnouncement(payloads.createAnnouncement)
      68 |
    > 69 |         let allAnnouncementIds = (await apiUtils.getAllAnnouncements()).map((a: { id: any }) => a.id)
         |                                                                         ^
      70 |         // console.log(allAnnouncementIds)
      71 |         
      72 |         let response = await request.put(endPoints.updateBatchAnnouncements, { data: { trash: allAnnouncementIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:69:73

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      67 |         // let [, announcementId] = await apiUtils.createAnnouncement(payloads.createAnnouncement)
      68 |
    > 69 |         let allAnnouncementIds = (await apiUtils.getAllAnnouncements()).map((a: { id: any }) => a.id)
         |                                                                         ^
      70 |         // console.log(allAnnouncementIds)
      71 |         
      72 |         let response = await request.put(endPoints.updateBatchAnnouncements, { data: { trash: allAnnouncementIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/announcements.spec.ts:69:73
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="calculation.spec.ts" timestamp="1674073035097" hostname="" tests="1" failures="0" skipped="1" time="0.001" errors="0">
<testcase name="calculation test calculation test" classname="calculation.spec.ts › calculation test › calculation test" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="coupons.spec.ts" timestamp="1674073035097" hostname="" tests="5" failures="5" skipped="0" time="1.843" errors="0">
<testcase name="coupon api test get all coupons" classname="coupons.spec.ts › coupon api test › get all coupons" time="0.372">
<failure message="coupons.spec.ts:25:9 get all coupons" type="FAILURE">
<![CDATA[  coupons.spec.ts:25:9 › coupon api test › get all coupons =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllCoupons)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllCoupons)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllCoupons)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="coupon api test get single coupon" classname="coupons.spec.ts › coupon api test › get single coupon" time="0.363">
<failure message="coupons.spec.ts:31:9 get single coupon" type="FAILURE">
<![CDATA[  coupons.spec.ts:31:9 › coupon api test › get single coupon =======================================

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleCoupon(couponId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:36:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleCoupon(couponId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:36:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleCoupon(couponId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:36:31
]]>
</failure>
</testcase>
<testcase name="coupon api test create a coupon" classname="coupons.spec.ts › coupon api test › create a coupon" time="0.372">
<failure message="coupons.spec.ts:39:9 create a coupon" type="FAILURE">
<![CDATA[  coupons.spec.ts:39:9 › coupon api test › create a coupon =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.post(endPoints.createCoupon, { data: { ...payloads.createCoupon(), product_ids: productId } })
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 |     test('update a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:42:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.post(endPoints.createCoupon, { data: { ...payloads.createCoupon(), product_ids: productId } })
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 |     test('update a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:42:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.post(endPoints.createCoupon, { data: { ...payloads.createCoupon(), product_ids: productId } })
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 |     test('update a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:42:31
]]>
</failure>
</testcase>
<testcase name="coupon api test update a coupon" classname="coupons.spec.ts › coupon api test › update a coupon" time="0.369">
<failure message="coupons.spec.ts:45:9 update a coupon" type="FAILURE">
<![CDATA[  coupons.spec.ts:45:9 › coupon api test › update a coupon =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      48 |         let response = await request.put(endPoints.updateCoupon(couponId), { data: payloads.updateCoupon() })
      49 |         let responseBody = await apiUtils.getResponseBody(response)
    > 50 |         expect(response.ok()).toBeTruthy()
         |                               ^
      51 |     });
      52 |
      53 |     test('delete a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:50:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      48 |         let response = await request.put(endPoints.updateCoupon(couponId), { data: payloads.updateCoupon() })
      49 |         let responseBody = await apiUtils.getResponseBody(response)
    > 50 |         expect(response.ok()).toBeTruthy()
         |                               ^
      51 |     });
      52 |
      53 |     test('delete a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:50:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      48 |         let response = await request.put(endPoints.updateCoupon(couponId), { data: payloads.updateCoupon() })
      49 |         let responseBody = await apiUtils.getResponseBody(response)
    > 50 |         expect(response.ok()).toBeTruthy()
         |                               ^
      51 |     });
      52 |
      53 |     test('delete a coupon', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:50:31
]]>
</failure>
</testcase>
<testcase name="coupon api test delete a coupon" classname="coupons.spec.ts › coupon api test › delete a coupon" time="0.367">
<failure message="coupons.spec.ts:53:9 delete a coupon" type="FAILURE">
<![CDATA[  coupons.spec.ts:53:9 › coupon api test › delete a coupon =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.delete(endPoints.deleteCoupon(couponId))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:58:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.delete(endPoints.deleteCoupon(couponId))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:58:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.delete(endPoints.deleteCoupon(couponId))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/coupons.spec.ts:58:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="customers.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="6" skipped="0" time="2.187" errors="0">
<testcase name="customers api test get all customers" classname="customers.spec.ts › customers api test › get all customers" time="0.363">
<failure message="customers.spec.ts:22:9 get all customers" type="FAILURE">
<![CDATA[  customers.spec.ts:22:9 › customers api test › get all customers ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:25:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:25:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:25:31
]]>
</failure>
</testcase>
<testcase name="customers api test get single customer" classname="customers.spec.ts › customers api test › get single customer" time="0.364">
<failure message="customers.spec.ts:28:9 get single customer" type="FAILURE">
<![CDATA[  customers.spec.ts:28:9 › customers api test › get single customer ================================

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleCustomer(customerId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('create a customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:33:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleCustomer(customerId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('create a customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:33:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleCustomer(customerId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('create a customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:33:31
]]>
</failure>
</testcase>
<testcase name="customers api test create a customer" classname="customers.spec.ts › customers api test › create a customer" time="0.367">
<failure message="customers.spec.ts:36:9 create a customer" type="FAILURE">
<![CDATA[  customers.spec.ts:36:9 › customers api test › create a customer ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer() })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |         expect(response.status()).toBe(201)
      41 |     });
      42 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:39:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer() })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |         expect(response.status()).toBe(201)
      41 |     });
      42 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:39:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer() })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |         expect(response.status()).toBe(201)
      41 |     });
      42 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:39:31
]]>
</failure>
</testcase>
<testcase name="customers api test update a customer" classname="customers.spec.ts › customers api test › update a customer" time="0.373">
<failure message="customers.spec.ts:43:9 update a customer" type="FAILURE">
<![CDATA[  customers.spec.ts:43:9 › customers api test › update a customer ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateCustomer(customerId), { data: payloads.updateCustomer() })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |     });
      50 |
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:48:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateCustomer(customerId), { data: payloads.updateCustomer() })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |     });
      50 |
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:48:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateCustomer(customerId), { data: payloads.updateCustomer() })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |     });
      50 |
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:48:31
]]>
</failure>
</testcase>
<testcase name="customers api test delete a customer" classname="customers.spec.ts › customers api test › delete a customer" time="0.365">
<failure message="customers.spec.ts:52:9 delete a customer" type="FAILURE">
<![CDATA[  customers.spec.ts:52:9 › customers api test › delete a customer ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteCustomer(customerId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch customers', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:57:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteCustomer(customerId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch customers', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:57:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteCustomer(customerId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch customers', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:57:31
]]>
</failure>
</testcase>
<testcase name="customers api test update batch customers" classname="customers.spec.ts › customers api test › update batch customers" time="0.355">
<failure message="customers.spec.ts:60:9 update batch customers" type="FAILURE">
<![CDATA[  customers.spec.ts:60:9 › customers api test › update batch customers =============================

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch customers', async ({ request }) => { 
    > 61 |         let allCustomerIds = (await apiUtils.getAllCustomers()).map((a: { id: any }) => a.id)
         |                                                                 ^
      62 |         // console.log(allCustomerIds)
      63 |         let batchCustomers = []
      64 |         for (let customerId of allCustomerIds.slice(0, 2)) {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:61:65

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch customers', async ({ request }) => { 
    > 61 |         let allCustomerIds = (await apiUtils.getAllCustomers()).map((a: { id: any }) => a.id)
         |                                                                 ^
      62 |         // console.log(allCustomerIds)
      63 |         let batchCustomers = []
      64 |         for (let customerId of allCustomerIds.slice(0, 2)) {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:61:65

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch customers', async ({ request }) => { 
    > 61 |         let allCustomerIds = (await apiUtils.getAllCustomers()).map((a: { id: any }) => a.id)
         |                                                                 ^
      62 |         // console.log(allCustomerIds)
      63 |         let batchCustomers = []
      64 |         for (let customerId of allCustomerIds.slice(0, 2)) {

        at /home/runner/work/dokan/dokan/tests/api/tests/customers.spec.ts:61:65
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="dummyData.spec.ts" timestamp="1674073035097" hostname="" tests="3" failures="3" skipped="0" time="1.503" errors="0">
<testcase name="dummy Data api test get dummy data status" classname="dummyData.spec.ts › dummy Data api test › get dummy data status" time="0.5">
<failure message="dummyData.spec.ts:19:9 get dummy data status" type="FAILURE">
<![CDATA[  dummyData.spec.ts:19:9 › dummy Data api test › get dummy data status =============================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getDummyDataStatus)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('import dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getDummyDataStatus)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('import dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getDummyDataStatus)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('import dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="dummy Data api test import dummy data" classname="dummyData.spec.ts › dummy Data api test › import dummy data" time="0.497">
<failure message="dummyData.spec.ts:25:9 import dummy data" type="FAILURE">
<![CDATA[  dummyData.spec.ts:25:9 › dummy Data api test › import dummy data =================================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.importDummyData, { data: payloads.dummyData })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('clear dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.importDummyData, { data: payloads.dummyData })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('clear dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.post(endPoints.importDummyData, { data: payloads.dummyData })
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('clear dummy data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="dummy Data api test clear dummy data" classname="dummyData.spec.ts › dummy Data api test › clear dummy data" time="0.506">
<failure message="dummyData.spec.ts:31:9 clear dummy data" type="FAILURE">
<![CDATA[  dummyData.spec.ts:31:9 › dummy Data api test › clear dummy data ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.delete(endPoints.clearDummyData)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.delete(endPoints.clearDummyData)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.delete(endPoints.clearDummyData)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/dummyData.spec.ts:34:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="followStores.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="2" skipped="0" time="0.738" errors="0">
<testcase name="follow store api test get store follow status @pro" classname="followStores.spec.ts › follow store api test › get store follow status @pro" time="0.369">
<failure message="followStores.spec.ts:23:9 get store follow status @pro" type="FAILURE">
<![CDATA[  followStores.spec.ts:23:9 › follow store api test › get store follow status @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreFollowStatus(sellerId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('follow-unfollow a store @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreFollowStatus(sellerId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('follow-unfollow a store @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreFollowStatus(sellerId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('follow-unfollow a store @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="follow store api test follow-unfollow a store @pro" classname="followStores.spec.ts › follow store api test › follow-unfollow a store @pro" time="0.369">
<failure message="followStores.spec.ts:31:9 follow-unfollow a store @pro" type="FAILURE">
<![CDATA[  followStores.spec.ts:31:9 › follow store api test › follow-unfollow a store @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.post(endPoints.followUnfollowStore, { data: { vendor_id: Number(sellerId) } })
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:36:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.post(endPoints.followUnfollowStore, { data: { vendor_id: Number(sellerId) } })
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:36:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.post(endPoints.followUnfollowStore, { data: { vendor_id: Number(sellerId) } })
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/followStores.spec.ts:36:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="modules.spec.ts" timestamp="1674073035097" hostname="" tests="3" failures="1" skipped="2" time="0.009" errors="0">
<testcase name="modules api test get all modules" classname="modules.spec.ts › modules api test › get all modules" time="0.009">
<failure message="modules.spec.ts:23:9 get all modules" type="FAILURE">
<![CDATA[  modules.spec.ts:23:9 › modules api test › get all modules ========================================

    TypeError: (intermediate value).map is not a function

       at ../utils/apiUtils.ts:484

      482 |     // get all modules ids
      483 |     async getAllModuleIds(auth?: any) {
    > 484 |         let allModuleIds = (await this.getAllModules(auth)).map((a: { id: any; }) => a.id)
          |                                                             ^
      485 |         // console.log(allModuleIds)
      486 |         return allModuleIds
      487 |     }

        at ApiUtils.getAllModuleIds (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:484:61)
        at /home/runner/work/dokan/dokan/tests/api/tests/modules.spec.ts:12:39

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

       at ../utils/apiUtils.ts:484

      482 |     // get all modules ids
      483 |     async getAllModuleIds(auth?: any) {
    > 484 |         let allModuleIds = (await this.getAllModules(auth)).map((a: { id: any; }) => a.id)
          |                                                             ^
      485 |         // console.log(allModuleIds)
      486 |         return allModuleIds
      487 |     }

        at ApiUtils.getAllModuleIds (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:484:61)
        at /home/runner/work/dokan/dokan/tests/api/tests/modules.spec.ts:12:39

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

       at ../utils/apiUtils.ts:484

      482 |     // get all modules ids
      483 |     async getAllModuleIds(auth?: any) {
    > 484 |         let allModuleIds = (await this.getAllModules(auth)).map((a: { id: any; }) => a.id)
          |                                                             ^
      485 |         // console.log(allModuleIds)
      486 |         return allModuleIds
      487 |     }

        at ApiUtils.getAllModuleIds (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:484:61)
        at /home/runner/work/dokan/dokan/tests/api/tests/modules.spec.ts:12:39
]]>
</failure>
</testcase>
<testcase name="modules api test deactivate a module" classname="modules.spec.ts › modules api test › deactivate a module" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="modules api test activate a module" classname="modules.spec.ts › modules api test › activate a module" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="orderNotes.spec.ts" timestamp="1674073035097" hostname="" tests="4" failures="4" skipped="0" time="1.429" errors="0">
<testcase name="order note api test get all order notes" classname="orderNotes.spec.ts › order note api test › get all order notes" time="0.356">
<failure message="orderNotes.spec.ts:25:9 get all order notes" type="FAILURE">
<![CDATA[  orderNotes.spec.ts:25:9 › order note api test › get all order notes ==============================

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getAllOrderNotes(orderId))
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get single order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:30:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getAllOrderNotes(orderId))
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get single order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:30:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getAllOrderNotes(orderId))
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get single order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:30:31
]]>
</failure>
</testcase>
<testcase name="order note api test get single order note" classname="orderNotes.spec.ts › order note api test › get single order note" time="0.356">
<failure message="orderNotes.spec.ts:33:9 get single order note" type="FAILURE">
<![CDATA[  orderNotes.spec.ts:33:9 › order note api test › get single order note ============================

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleOrderNote(orderId, orderNoteId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('create an order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:38:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleOrderNote(orderId, orderNoteId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('create an order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:38:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleOrderNote(orderId, orderNoteId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('create an order note', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:38:31
]]>
</failure>
</testcase>
<testcase name="order note api test create an order note" classname="orderNotes.spec.ts › order note api test › create an order note" time="0.358">
<failure message="orderNotes.spec.ts:41:9 create an order note" type="FAILURE">
<![CDATA[  orderNotes.spec.ts:41:9 › order note api test › create an order note =============================

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.createOrderNote(orderId), { data: payloads.createOrderNote })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |         expect(response.status()).toBe(201)
      48 |     });
      49 |

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.createOrderNote(orderId), { data: payloads.createOrderNote })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |         expect(response.status()).toBe(201)
      48 |     });
      49 |

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.post(endPoints.createOrderNote(orderId), { data: payloads.createOrderNote })
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |         expect(response.status()).toBe(201)
      48 |     });
      49 |

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="order note api test delete an order note" classname="orderNotes.spec.ts › order note api test › delete an order note" time="0.359">
<failure message="orderNotes.spec.ts:50:9 delete an order note" type="FAILURE">
<![CDATA[  orderNotes.spec.ts:50:9 › order note api test › delete an order note =============================

    Error: expect(received).toBeTruthy()

    Received: false

      53 |         let response = await request.delete(endPoints.deleteOrderNote(orderId, orderNoteId))
      54 |         let responseBody = await apiUtils.getResponseBody(response)
    > 55 |         expect(response.ok()).toBeTruthy()
         |                               ^
      56 |     });
      57 |
      58 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:55:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      53 |         let response = await request.delete(endPoints.deleteOrderNote(orderId, orderNoteId))
      54 |         let responseBody = await apiUtils.getResponseBody(response)
    > 55 |         expect(response.ok()).toBeTruthy()
         |                               ^
      56 |     });
      57 |
      58 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:55:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      53 |         let response = await request.delete(endPoints.deleteOrderNote(orderId, orderNoteId))
      54 |         let responseBody = await apiUtils.getResponseBody(response)
    > 55 |         expect(response.ok()).toBeTruthy()
         |                               ^
      56 |     });
      57 |
      58 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orderNotes.spec.ts:55:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="orders.spec.ts" timestamp="1674073035097" hostname="" tests="5" failures="5" skipped="0" time="1.841" errors="0">
<testcase name="order api test get all orders" classname="orders.spec.ts › order api test › get all orders" time="0.367">
<failure message="orders.spec.ts:23:9 get all orders" type="FAILURE">
<![CDATA[  orders.spec.ts:23:9 › order api test › get all orders ============================================

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getAllOrders)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test('get orders summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:26:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getAllOrders)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test('get orders summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:26:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getAllOrders)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test('get orders summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:26:31
]]>
</failure>
</testcase>
<testcase name="order api test get orders summary" classname="orders.spec.ts › order api test › get orders summary" time="0.368">
<failure message="orders.spec.ts:29:9 get orders summary" type="FAILURE">
<![CDATA[  orders.spec.ts:29:9 › order api test › get orders summary ========================================

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getOrdersSummary)
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('get orders with before after', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:32:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getOrdersSummary)
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('get orders with before after', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:32:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      30 |         let response = await request.get(endPoints.getOrdersSummary)
      31 |         let responseBody = await apiUtils.getResponseBody(response)
    > 32 |         expect(response.ok()).toBeTruthy()
         |                               ^
      33 |     });
      34 |
      35 |     test('get orders with before after', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:32:31
]]>
</failure>
</testcase>
<testcase name="order api test get orders with before after" classname="orders.spec.ts › order api test › get orders with before after" time="0.367">
<failure message="orders.spec.ts:35:9 get orders with before after" type="FAILURE">
<![CDATA[  orders.spec.ts:35:9 › order api test › get orders with before after ==============================

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getOrdersBeforeAfter(`${helpers.currentYear}-12-30`, `${helpers.currentYear}-01-01`))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('get single order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:38:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getOrdersBeforeAfter(`${helpers.currentYear}-12-30`, `${helpers.currentYear}-01-01`))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('get single order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:38:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getOrdersBeforeAfter(`${helpers.currentYear}-12-30`, `${helpers.currentYear}-01-01`))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('get single order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:38:31
]]>
</failure>
</testcase>
<testcase name="order api test get single order" classname="orders.spec.ts › order api test › get single order" time="0.369">
<failure message="orders.spec.ts:41:9 get single order" type="FAILURE">
<![CDATA[  orders.spec.ts:41:9 › order api test › get single order ==========================================

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSingleOrder(orderId))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update an order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSingleOrder(orderId))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update an order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSingleOrder(orderId))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update an order', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="order api test update an order" classname="orders.spec.ts › order api test › update an order" time="0.37">
<failure message="orders.spec.ts:49:9 update an order" type="FAILURE">
<![CDATA[  orders.spec.ts:49:9 › order api test › update an order ===========================================

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.put(endPoints.updateOrder(orderId), { data: payloads.updateOrder })
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:54:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.put(endPoints.updateOrder(orderId), { data: payloads.updateOrder })
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:54:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.put(endPoints.updateOrder(orderId), { data: payloads.updateOrder })
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/orders.spec.ts:54:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="productAdvertisements.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="1" skipped="5" time="0.009" errors="0">
<testcase name="product advertisement api test get all advertised product stores @pro" classname="productAdvertisements.spec.ts › product advertisement api test › get all advertised product stores @pro" time="0.009">
<failure message="productAdvertisements.spec.ts:21:9 get all advertised product stores @pro" type="FAILURE">
<![CDATA[  productAdvertisements.spec.ts:21:9 › product advertisement api test › get all advertised product stores @pro 

    TypeError: Cannot read property 'id' of undefined

       at ../utils/apiUtils.ts:580

      578 |     async createProductAdvertisement(product: object, auth?: any) {
      579 |         let [body, productId] = await this.createProduct(product, auth)
    > 580 |         let sellerId = body.store.id
          |                                   ^
      581 |
      582 |         let response = await this.request.post(endPoints.createProductAdvertisement, { data: { vendor_id: sellerId, product_id: productId }, headers: auth })
      583 |         let responseBody = await this.getResponseBody(response)

        at ApiUtils.createProductAdvertisement (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:580:35)
        at /home/runner/work/dokan/dokan/tests/api/tests/productAdvertisements.spec.ts:11:18

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: Cannot read property 'id' of undefined

       at ../utils/apiUtils.ts:580

      578 |     async createProductAdvertisement(product: object, auth?: any) {
      579 |         let [body, productId] = await this.createProduct(product, auth)
    > 580 |         let sellerId = body.store.id
          |                                   ^
      581 |
      582 |         let response = await this.request.post(endPoints.createProductAdvertisement, { data: { vendor_id: sellerId, product_id: productId }, headers: auth })
      583 |         let responseBody = await this.getResponseBody(response)

        at ApiUtils.createProductAdvertisement (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:580:35)
        at /home/runner/work/dokan/dokan/tests/api/tests/productAdvertisements.spec.ts:11:18

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: Cannot read property 'id' of undefined

       at ../utils/apiUtils.ts:580

      578 |     async createProductAdvertisement(product: object, auth?: any) {
      579 |         let [body, productId] = await this.createProduct(product, auth)
    > 580 |         let sellerId = body.store.id
          |                                   ^
      581 |
      582 |         let response = await this.request.post(endPoints.createProductAdvertisement, { data: { vendor_id: sellerId, product_id: productId }, headers: auth })
      583 |         let responseBody = await this.getResponseBody(response)

        at ApiUtils.createProductAdvertisement (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:580:35)
        at /home/runner/work/dokan/dokan/tests/api/tests/productAdvertisements.spec.ts:11:18
]]>
</failure>
</testcase>
<testcase name="product advertisement api test get all advertised product @pro" classname="productAdvertisements.spec.ts › product advertisement api test › get all advertised product @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="product advertisement api test create a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › create a product advertisement @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="product advertisement api test expire a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › expire a product advertisement @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="product advertisement api test delete a product advertisement @pro" classname="productAdvertisements.spec.ts › product advertisement api test › delete a product advertisement @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="product advertisement api test update batch product advertisements @pro" classname="productAdvertisements.spec.ts › product advertisement api test › update batch product advertisements @pro" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="productAttributes.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="6" skipped="0" time="2.187" errors="0">
<testcase name="attribute api test get all attributes" classname="productAttributes.spec.ts › attribute api test › get all attributes" time="0.364">
<failure message="productAttributes.spec.ts:22:9 get all attributes" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:22:9 › attribute api test › get all attributes =========================

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllAttributes)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:25:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllAttributes)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:25:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllAttributes)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:25:31
]]>
</failure>
</testcase>
<testcase name="attribute api test get single attribute" classname="productAttributes.spec.ts › attribute api test › get single attribute" time="0.363">
<failure message="productAttributes.spec.ts:28:9 get single attribute" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:28:9 › attribute api test › get single attribute =======================

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleAttribute(attributeId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:33:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleAttribute(attributeId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:33:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.get(endPoints.getSingleAttribute(attributeId))
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:33:31
]]>
</failure>
</testcase>
<testcase name="attribute api test create an attribute" classname="productAttributes.spec.ts › attribute api test › create an attribute" time="0.365">
<failure message="productAttributes.spec.ts:37:9 create an attribute" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:37:9 › attribute api test › create an attribute ========================

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createAttribute, { data: payloads.createAttribute() })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |         expect(response.status()).toBe(201)
      42 |     });
      43 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createAttribute, { data: payloads.createAttribute() })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |         expect(response.status()).toBe(201)
      42 |     });
      43 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.createAttribute, { data: payloads.createAttribute() })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |         expect(response.status()).toBe(201)
      42 |     });
      43 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="attribute api test update an attribute" classname="productAttributes.spec.ts › attribute api test › update an attribute" time="0.368">
<failure message="productAttributes.spec.ts:44:9 update an attribute" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:44:9 › attribute api test › update an attribute ========================

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.put(endPoints.updateAttribute(attributeId), { data: payloads.updateAttribute() })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('delete an attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:49:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.put(endPoints.updateAttribute(attributeId), { data: payloads.updateAttribute() })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('delete an attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:49:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.put(endPoints.updateAttribute(attributeId), { data: payloads.updateAttribute() })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('delete an attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:49:31
]]>
</failure>
</testcase>
<testcase name="attribute api test delete an attribute" classname="productAttributes.spec.ts › attribute api test › delete an attribute" time="0.371">
<failure message="productAttributes.spec.ts:52:9 delete an attribute" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:52:9 › attribute api test › delete an attribute ========================

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteAttribute(attributeId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch attributes', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:57:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteAttribute(attributeId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch attributes', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:57:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.delete(endPoints.deleteAttribute(attributeId))
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('update batch attributes', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:57:31
]]>
</failure>
</testcase>
<testcase name="attribute api test update batch attributes" classname="productAttributes.spec.ts › attribute api test › update batch attributes" time="0.356">
<failure message="productAttributes.spec.ts:60:9 update batch attributes" type="FAILURE">
<![CDATA[  productAttributes.spec.ts:60:9 › attribute api test › update batch attributes ====================

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch attributes', async ({ request }) => { 
    > 61 |         let allAttributeIds = (await apiUtils.getAllAttributes()).map((a: { id: any }) => a.id)
         |                                                                   ^
      62 |         // console.log(allAttributeIds)
      63 |         
      64 |         let batchAttributes = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:61:67

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch attributes', async ({ request }) => { 
    > 61 |         let allAttributeIds = (await apiUtils.getAllAttributes()).map((a: { id: any }) => a.id)
         |                                                                   ^
      62 |         // console.log(allAttributeIds)
      63 |         
      64 |         let batchAttributes = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:61:67

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      59 |
      60 |     test('update batch attributes', async ({ request }) => { 
    > 61 |         let allAttributeIds = (await apiUtils.getAllAttributes()).map((a: { id: any }) => a.id)
         |                                                                   ^
      62 |         // console.log(allAttributeIds)
      63 |         
      64 |         let batchAttributes = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributes.spec.ts:61:67
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="productAttributeTerms.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="6" skipped="0" time="2.196" errors="0">
<testcase name="attribute term api test get all attribute terms" classname="productAttributeTerms.spec.ts › attribute term api test › get all attribute terms" time="0.365">
<failure message="productAttributeTerms.spec.ts:23:9 get all attribute terms" type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:23:9 › attribute term api test › get all attribute terms ===========

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllAttributeTerms(attributeId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllAttributeTerms(attributeId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllAttributeTerms(attributeId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="attribute term api test get single attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › get single attribute term" time="0.369">
<failure message="productAttributeTerms.spec.ts:31:9 get single attribute term" type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:31:9 › attribute term api test › get single attribute term =========

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleAttributeTerm(attributeId, attributeTermId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:36:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleAttributeTerm(attributeId, attributeTermId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:36:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getSingleAttributeTerm(attributeId, attributeTermId))
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('create an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:36:31
]]>
</failure>
</testcase>
<testcase name="attribute term api test create an attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › create an attribute term" time="0.364">
<failure message="productAttributeTerms.spec.ts:39:9 create an attribute term" type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:39:9 › attribute term api test › create an attribute term ==========

    Error: expect(received).toBeTruthy()

    Received: false

      42 |         let response = await request.post(endPoints.createAttributeTerm(attributeId), { data: payloads.createAttributeTerm() })
      43 |         let responseBody = await apiUtils.getResponseBody(response)
    > 44 |         expect(response.ok()).toBeTruthy()
         |                               ^
      45 |     });
      46 |
      47 |     test('update an attribute term ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:44:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      42 |         let response = await request.post(endPoints.createAttributeTerm(attributeId), { data: payloads.createAttributeTerm() })
      43 |         let responseBody = await apiUtils.getResponseBody(response)
    > 44 |         expect(response.ok()).toBeTruthy()
         |                               ^
      45 |     });
      46 |
      47 |     test('update an attribute term ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:44:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      42 |         let response = await request.post(endPoints.createAttributeTerm(attributeId), { data: payloads.createAttributeTerm() })
      43 |         let responseBody = await apiUtils.getResponseBody(response)
    > 44 |         expect(response.ok()).toBeTruthy()
         |                               ^
      45 |     });
      46 |
      47 |     test('update an attribute term ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:44:31
]]>
</failure>
</testcase>
<testcase name="attribute term api test update an attribute term " classname="productAttributeTerms.spec.ts › attribute term api test › update an attribute term " time="0.368">
<failure message="productAttributeTerms.spec.ts:47:9 update an attribute term " type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:47:9 › attribute term api test › update an attribute term  =========

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.put(endPoints.updateAttributeTerm(attributeId, attributeTermId), { data: payloads.updateAttributeTerm() })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('delete an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:52:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.put(endPoints.updateAttributeTerm(attributeId, attributeTermId), { data: payloads.updateAttributeTerm() })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('delete an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:52:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.put(endPoints.updateAttributeTerm(attributeId, attributeTermId), { data: payloads.updateAttributeTerm() })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('delete an attribute term', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="attribute term api test delete an attribute term" classname="productAttributeTerms.spec.ts › attribute term api test › delete an attribute term" time="0.365">
<failure message="productAttributeTerms.spec.ts:55:9 delete an attribute term" type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:55:9 › attribute term api test › delete an attribute term ==========

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.delete(endPoints.deleteAttributeTerm(attributeId, attributeTermId))
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:60:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.delete(endPoints.deleteAttributeTerm(attributeId, attributeTermId))
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:60:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.delete(endPoints.deleteAttributeTerm(attributeId, attributeTermId))
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:60:31
]]>
</failure>
</testcase>
<testcase name="attribute term api test update batch attribute terms" classname="productAttributeTerms.spec.ts › attribute term api test › update batch attribute terms" time="0.365">
<failure message="productAttributeTerms.spec.ts:63:9 update batch attribute terms" type="FAILURE">
<![CDATA[  productAttributeTerms.spec.ts:63:9 › attribute term api test › update batch attribute terms ======

    TypeError: (intermediate value).map is not a function

      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {
    > 64 |         let allAttributeTermIds = (await apiUtils.getAllAttributeTerms(attributeId)).map((a: { id: any; }) => a.id)
         |                                                                                      ^
      65 |         // console.log(allAttributeTermIds)
      66 |         
      67 |         let batchAttributeTerms = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:64:86

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {
    > 64 |         let allAttributeTermIds = (await apiUtils.getAllAttributeTerms(attributeId)).map((a: { id: any; }) => a.id)
         |                                                                                      ^
      65 |         // console.log(allAttributeTermIds)
      66 |         
      67 |         let batchAttributeTerms = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:64:86

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      62 |
      63 |     test('update batch attribute terms', async ({ request }) => {
    > 64 |         let allAttributeTermIds = (await apiUtils.getAllAttributeTerms(attributeId)).map((a: { id: any; }) => a.id)
         |                                                                                      ^
      65 |         // console.log(allAttributeTermIds)
      66 |         
      67 |         let batchAttributeTerms = []

        at /home/runner/work/dokan/dokan/tests/api/tests/productAttributeTerms.spec.ts:64:86
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="productReviews.spec.ts" timestamp="1674073035097" hostname="" tests="3" failures="3" skipped="0" time="1.102" errors="0">
<testcase name="product review api test get all product reviews" classname="productReviews.spec.ts › product review api test › get all product reviews" time="0.368">
<failure message="productReviews.spec.ts:22:9 get all product reviews" type="FAILURE">
<![CDATA[  productReviews.spec.ts:22:9 › product review api test › get all product reviews ==================

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllProductReviews)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get product reviews summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:25:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllProductReviews)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get product reviews summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:25:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllProductReviews)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get product reviews summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:25:31
]]>
</failure>
</testcase>
<testcase name="product review api test get product reviews summary" classname="productReviews.spec.ts › product review api test › get product reviews summary" time="0.367">
<failure message="productReviews.spec.ts:28:9 get product reviews summary" type="FAILURE">
<![CDATA[  productReviews.spec.ts:28:9 › product review api test › get product reviews summary ==============

    Error: expect(received).toBeTruthy()

    Received: false

      29 |         let response = await request.get(endPoints.getProductReviewSummary)
      30 |         let responseBody = await apiUtils.getResponseBody(response)
    > 31 |         expect(response.ok()).toBeTruthy()
         |                               ^
      32 |     });
      33 |
      34 |     test('update a product review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:31:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      29 |         let response = await request.get(endPoints.getProductReviewSummary)
      30 |         let responseBody = await apiUtils.getResponseBody(response)
    > 31 |         expect(response.ok()).toBeTruthy()
         |                               ^
      32 |     });
      33 |
      34 |     test('update a product review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:31:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      29 |         let response = await request.get(endPoints.getProductReviewSummary)
      30 |         let responseBody = await apiUtils.getResponseBody(response)
    > 31 |         expect(response.ok()).toBeTruthy()
         |                               ^
      32 |     });
      33 |
      34 |     test('update a product review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:31:31
]]>
</failure>
</testcase>
<testcase name="product review api test update a product review" classname="productReviews.spec.ts › product review api test › update a product review" time="0.367">
<failure message="productReviews.spec.ts:34:9 update a product review" type="FAILURE">
<![CDATA[  productReviews.spec.ts:34:9 › product review api test › update a product review ==================

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateProductReview })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |     });
      41 |
      42 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:39:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateProductReview })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |     });
      41 |
      42 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:39:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      37 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateProductReview })
      38 |         let responseBody = await apiUtils.getResponseBody(response)
    > 39 |         expect(response.ok()).toBeTruthy()
         |                               ^
      40 |     });
      41 |
      42 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/productReviews.spec.ts:39:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="products.spec.ts" timestamp="1674073035097" hostname="" tests="12" failures="8" skipped="0" time="3.389" errors="0">
<testcase name="product api test get products summary" classname="products.spec.ts › product api test › get products summary" time="0.364">
<failure message="products.spec.ts:21:9 get products summary" type="FAILURE">
<![CDATA[  products.spec.ts:21:9 › product api test › get products summary ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getProductsSummary)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get top rated products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:24:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getProductsSummary)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get top rated products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:24:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getProductsSummary)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get top rated products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:24:31
]]>
</failure>
</testcase>
<testcase name="product api test get top rated products" classname="products.spec.ts › product api test › get top rated products" time="0.123">
</testcase>
<testcase name="product api test get best selling products" classname="products.spec.ts › product api test › get best selling products" time="0.117">
</testcase>
<testcase name="product api test get featured products" classname="products.spec.ts › product api test › get featured products" time="0.117">
</testcase>
<testcase name="product api test get latest products" classname="products.spec.ts › product api test › get latest products" time="0.117">
</testcase>
<testcase name="product api test get all multiStep categories" classname="products.spec.ts › product api test › get all multiStep categories" time="0.361">
<failure message="products.spec.ts:51:9 get all multiStep categories" type="FAILURE">
<![CDATA[  products.spec.ts:51:9 › product api test › get all multiStep categories ==========================

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.get(endPoints.getAllMultiStepCategories)
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('get all products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:54:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.get(endPoints.getAllMultiStepCategories)
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('get all products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:54:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      52 |         let response = await request.get(endPoints.getAllMultiStepCategories)
      53 |         let responseBody = await apiUtils.getResponseBody(response)
    > 54 |         expect(response.ok()).toBeTruthy()
         |                               ^
      55 |     });
      56 |
      57 |     test('get all products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:54:31
]]>
</failure>
</testcase>
<testcase name="product api test get all products" classname="products.spec.ts › product api test › get all products" time="0.369">
<failure message="products.spec.ts:57:9 get all products" type="FAILURE">
<![CDATA[  products.spec.ts:57:9 › product api test › get all products ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.get(endPoints.getAllProducts)
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('get single product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:60:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.get(endPoints.getAllProducts)
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('get single product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:60:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      58 |         let response = await request.get(endPoints.getAllProducts)
      59 |         let responseBody = await apiUtils.getResponseBody(response)
    > 60 |         expect(response.ok()).toBeTruthy()
         |                               ^
      61 |     });
      62 |
      63 |     test('get single product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:60:31
]]>
</failure>
</testcase>
<testcase name="product api test get single product" classname="products.spec.ts › product api test › get single product" time="0.363">
<failure message="products.spec.ts:63:9 get single product" type="FAILURE">
<![CDATA[  products.spec.ts:63:9 › product api test › get single product ====================================

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.get(endPoints.getSingleProduct(productId))
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 |     test('get all related products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:68:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.get(endPoints.getSingleProduct(productId))
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 |     test('get all related products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:68:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.get(endPoints.getSingleProduct(productId))
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 |     test('get all related products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:68:31
]]>
</failure>
</testcase>
<testcase name="product api test get all related products" classname="products.spec.ts › product api test › get all related products" time="0.361">
<failure message="products.spec.ts:71:9 get all related products" type="FAILURE">
<![CDATA[  products.spec.ts:71:9 › product api test › get all related products ==============================

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAllRelatedProducts(productId))
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 |     test('create a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:76:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAllRelatedProducts(productId))
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 |     test('create a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:76:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      74 |         let response = await request.get(endPoints.getAllRelatedProducts(productId))
      75 |         let responseBody = await apiUtils.getResponseBody(response)
    > 76 |         expect(response.ok()).toBeTruthy()
         |                               ^
      77 |     });
      78 |
      79 |     test('create a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:76:31
]]>
</failure>
</testcase>
<testcase name="product api test create a product" classname="products.spec.ts › product api test › create a product" time="0.374">
<failure message="products.spec.ts:79:9 create a product" type="FAILURE">
<![CDATA[  products.spec.ts:79:9 › product api test › create a product ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      80 |         let response = await request.post(endPoints.createProduct, { data: payloads.createProduct() })
      81 |         let responseBody = await apiUtils.getResponseBody(response)
    > 82 |         expect(response.ok()).toBeTruthy()
         |                               ^
      83 |     });
      84 |
      85 |     test('update a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:82:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      80 |         let response = await request.post(endPoints.createProduct, { data: payloads.createProduct() })
      81 |         let responseBody = await apiUtils.getResponseBody(response)
    > 82 |         expect(response.ok()).toBeTruthy()
         |                               ^
      83 |     });
      84 |
      85 |     test('update a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:82:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      80 |         let response = await request.post(endPoints.createProduct, { data: payloads.createProduct() })
      81 |         let responseBody = await apiUtils.getResponseBody(response)
    > 82 |         expect(response.ok()).toBeTruthy()
         |                               ^
      83 |     });
      84 |
      85 |     test('update a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:82:31
]]>
</failure>
</testcase>
<testcase name="product api test update a product" classname="products.spec.ts › product api test › update a product" time="0.364">
<failure message="products.spec.ts:85:9 update a product" type="FAILURE">
<![CDATA[  products.spec.ts:85:9 › product api test › update a product ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      88 |         let response = await request.put(endPoints.updateProduct(productId), { data: payloads.updateProduct() })
      89 |         let responseBody = await apiUtils.getResponseBody(response)
    > 90 |         expect(response.ok()).toBeTruthy()
         |                               ^
      91 |     });
      92 |
      93 |     test('delete a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:90:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      88 |         let response = await request.put(endPoints.updateProduct(productId), { data: payloads.updateProduct() })
      89 |         let responseBody = await apiUtils.getResponseBody(response)
    > 90 |         expect(response.ok()).toBeTruthy()
         |                               ^
      91 |     });
      92 |
      93 |     test('delete a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:90:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      88 |         let response = await request.put(endPoints.updateProduct(productId), { data: payloads.updateProduct() })
      89 |         let responseBody = await apiUtils.getResponseBody(response)
    > 90 |         expect(response.ok()).toBeTruthy()
         |                               ^
      91 |     });
      92 |
      93 |     test('delete a product', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:90:31
]]>
</failure>
</testcase>
<testcase name="product api test delete a product" classname="products.spec.ts › product api test › delete a product" time="0.359">
<failure message="products.spec.ts:93:9 delete a product" type="FAILURE">
<![CDATA[  products.spec.ts:93:9 › product api test › delete a product ======================================

    Error: expect(received).toBeTruthy()

    Received: false

       96 |         let response = await request.delete(endPoints.deleteProduct(productId))
       97 |         let responseBody = await apiUtils.getResponseBody(response)
    >  98 |         expect(response.ok()).toBeTruthy()
          |                               ^
       99 |     });
      100 |
      101 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:98:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

       96 |         let response = await request.delete(endPoints.deleteProduct(productId))
       97 |         let responseBody = await apiUtils.getResponseBody(response)
    >  98 |         expect(response.ok()).toBeTruthy()
          |                               ^
       99 |     });
      100 |
      101 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:98:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

       96 |         let response = await request.delete(endPoints.deleteProduct(productId))
       97 |         let responseBody = await apiUtils.getResponseBody(response)
    >  98 |         expect(response.ok()).toBeTruthy()
          |                               ^
       99 |     });
      100 |
      101 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/products.spec.ts:98:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="productVariations.spec.ts" timestamp="1674073035097" hostname="" tests="5" failures="4" skipped="1" time="1.427" errors="0">
<testcase name="product variation api test get all product variations" classname="productVariations.spec.ts › product variation api test › get all product variations" time="0.357">
<failure message="productVariations.spec.ts:24:9 get all product variations" type="FAILURE">
<![CDATA[  productVariations.spec.ts:24:9 › product variation api test › get all product variations =========

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getAllProductVariations(productId))
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get single product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:29:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getAllProductVariations(productId))
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get single product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:29:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getAllProductVariations(productId))
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get single product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:29:31
]]>
</failure>
</testcase>
<testcase name="product variation api test get single product variation" classname="productVariations.spec.ts › product variation api test › get single product variation" time="0.356">
<failure message="productVariations.spec.ts:32:9 get single product variation" type="FAILURE">
<![CDATA[  productVariations.spec.ts:32:9 › product variation api test › get single product variation =======

    Error: expect(received).toBeTruthy()

    Received: false

      35 |         let response = await request.get(endPoints.getSingleProductVariation(productId, variationId))
      36 |         let responseBody = await apiUtils.getResponseBody(response)
    > 37 |         expect(response.ok()).toBeTruthy()
         |                               ^
      38 |     });
      39 |
      40 |     test('create a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:37:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      35 |         let response = await request.get(endPoints.getSingleProductVariation(productId, variationId))
      36 |         let responseBody = await apiUtils.getResponseBody(response)
    > 37 |         expect(response.ok()).toBeTruthy()
         |                               ^
      38 |     });
      39 |
      40 |     test('create a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:37:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      35 |         let response = await request.get(endPoints.getSingleProductVariation(productId, variationId))
      36 |         let responseBody = await apiUtils.getResponseBody(response)
    > 37 |         expect(response.ok()).toBeTruthy()
         |                               ^
      38 |     });
      39 |
      40 |     test('create a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:37:31
]]>
</failure>
</testcase>
<testcase name="product variation api test create a product variation" classname="productVariations.spec.ts › product variation api test › create a product variation" time="0.355">
<failure message="productVariations.spec.ts:40:9 create a product variation" type="FAILURE">
<![CDATA[  productVariations.spec.ts:40:9 › product variation api test › create a product variation =========

    Error: expect(received).toBeTruthy()

    Received: false

      43 |         let response = await request.post(endPoints.createProductVariation(productId), { data: payloads.createProductVariation })
      44 |         let responseBody = await apiUtils.getResponseBody(response)
    > 45 |         expect(response.ok()).toBeTruthy()
         |                               ^
      46 |     });
      47 |
      48 |     test('update a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:45:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      43 |         let response = await request.post(endPoints.createProductVariation(productId), { data: payloads.createProductVariation })
      44 |         let responseBody = await apiUtils.getResponseBody(response)
    > 45 |         expect(response.ok()).toBeTruthy()
         |                               ^
      46 |     });
      47 |
      48 |     test('update a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:45:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      43 |         let response = await request.post(endPoints.createProductVariation(productId), { data: payloads.createProductVariation })
      44 |         let responseBody = await apiUtils.getResponseBody(response)
    > 45 |         expect(response.ok()).toBeTruthy()
         |                               ^
      46 |     });
      47 |
      48 |     test('update a product variation', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:45:31
]]>
</failure>
</testcase>
<testcase name="product variation api test update a product variation" classname="productVariations.spec.ts › product variation api test › update a product variation" time="0.358">
<failure message="productVariations.spec.ts:48:9 update a product variation" type="FAILURE">
<![CDATA[  productVariations.spec.ts:48:9 › product variation api test › update a product variation =========

    Error: expect(received).toBeTruthy()

    Received: false

      51 |         let response = await request.put(endPoints.updateProductVariation(productId, variationId), { data: payloads.updateProductVariation() })
      52 |         let responseBody = await apiUtils.getResponseBody(response)
    > 53 |         expect(response.ok()).toBeTruthy()
         |                               ^
      54 |
      55 |     });
      56 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:53:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      51 |         let response = await request.put(endPoints.updateProductVariation(productId, variationId), { data: payloads.updateProductVariation() })
      52 |         let responseBody = await apiUtils.getResponseBody(response)
    > 53 |         expect(response.ok()).toBeTruthy()
         |                               ^
      54 |
      55 |     });
      56 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:53:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      51 |         let response = await request.put(endPoints.updateProductVariation(productId, variationId), { data: payloads.updateProductVariation() })
      52 |         let responseBody = await apiUtils.getResponseBody(response)
    > 53 |         expect(response.ok()).toBeTruthy()
         |                               ^
      54 |
      55 |     });
      56 |

        at /home/runner/work/dokan/dokan/tests/api/tests/productVariations.spec.ts:53:31
]]>
</failure>
</testcase>
<testcase name="product variation api test delete a product variation" classname="productVariations.spec.ts › product variation api test › delete a product variation" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="quoteRequests.spec.ts" timestamp="1674073035097" hostname="" tests="8" failures="1" skipped="7" time="0.01" errors="0">
<testcase name="request quote api test get all request quotes @pro" classname="quoteRequests.spec.ts › request quote api test › get all request quotes @pro" time="0.01">
<failure message="quoteRequests.spec.ts:25:9 get all request quotes @pro" type="FAILURE">
<![CDATA[  quoteRequests.spec.ts:25:9 › request quote api test › get all request quotes @pro ================

    TypeError: Cannot read property 'data' of undefined

       at ../utils/apiUtils.ts:780

      778 |         let response = await this.request.post(endPoints.createRequestQuote, { data: payload, headers: auth })
      779 |         let responseBody = await this.getResponseBody(response)
    > 780 |         let quoteRuleId = responseBody[0].data.id
          |                                           ^
      781 |         // console.log(quoteRuleId)
      782 |         return [responseBody, quoteRuleId]
      783 |     }

        at ApiUtils.createRequestQuote (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:780:43)
        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRequests.spec.ts:14:19

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: Cannot read property 'data' of undefined

       at ../utils/apiUtils.ts:780

      778 |         let response = await this.request.post(endPoints.createRequestQuote, { data: payload, headers: auth })
      779 |         let responseBody = await this.getResponseBody(response)
    > 780 |         let quoteRuleId = responseBody[0].data.id
          |                                           ^
      781 |         // console.log(quoteRuleId)
      782 |         return [responseBody, quoteRuleId]
      783 |     }

        at ApiUtils.createRequestQuote (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:780:43)
        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRequests.spec.ts:14:19

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: Cannot read property 'data' of undefined

       at ../utils/apiUtils.ts:780

      778 |         let response = await this.request.post(endPoints.createRequestQuote, { data: payload, headers: auth })
      779 |         let responseBody = await this.getResponseBody(response)
    > 780 |         let quoteRuleId = responseBody[0].data.id
          |                                           ^
      781 |         // console.log(quoteRuleId)
      782 |         return [responseBody, quoteRuleId]
      783 |     }

        at ApiUtils.createRequestQuote (/home/runner/work/dokan/dokan/tests/api/utils/apiUtils.ts:780:43)
        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRequests.spec.ts:14:19
]]>
</failure>
</testcase>
<testcase name="request quote api test get single request quote @pro" classname="quoteRequests.spec.ts › request quote api test › get single request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test create a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › create a request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test update a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › update a request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test delete a request quote @pro" classname="quoteRequests.spec.ts › request quote api test › delete a request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test restore a deleted request quote @pro" classname="quoteRequests.spec.ts › request quote api test › restore a deleted request quote @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test convert request quote to order @pro" classname="quoteRequests.spec.ts › request quote api test › convert request quote to order @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="request quote api test update batch request quote @pro " classname="quoteRequests.spec.ts › request quote api test › update batch request quote @pro " time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="quoteRules.spec.ts" timestamp="1674073035097" hostname="" tests="7" failures="2" skipped="0" time="1.293" errors="0">
<testcase name="quote rules api test get all quote rules @pro" classname="quoteRules.spec.ts › quote rules api test › get all quote rules @pro" time="0.36">
<failure message="quoteRules.spec.ts:22:9 get all quote rules @pro" type="FAILURE">
<![CDATA[  quoteRules.spec.ts:22:9 › quote rules api test › get all quote rules @pro ========================

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllQuoteRules)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single quote rule @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:25:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllQuoteRules)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single quote rule @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:25:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllQuoteRules)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('get single quote rule @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:25:31
]]>
</failure>
</testcase>
<testcase name="quote rules api test get single quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › get single quote rule @pro" time="0.119">
</testcase>
<testcase name="quote rules api test create a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › create a quote rule @pro" time="0.116">
</testcase>
<testcase name="quote rules api test update a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › update a quote rule @pro" time="0.117">
</testcase>
<testcase name="quote rules api test delete a quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › delete a quote rule @pro" time="0.115">
</testcase>
<testcase name="quote rules api test restore a deleted quote rule @pro" classname="quoteRules.spec.ts › quote rules api test › restore a deleted quote rule @pro" time="0.114">
</testcase>
<testcase name="quote rules api test update batch quote rules @pro" classname="quoteRules.spec.ts › quote rules api test › update batch quote rules @pro" time="0.352">
<failure message="quoteRules.spec.ts:77:9 update batch quote rules @pro" type="FAILURE">
<![CDATA[  quoteRules.spec.ts:77:9 › quote rules api test › update batch quote rules @pro ===================

    TypeError: (intermediate value).map is not a function

      76 |
      77 |     test('update batch quote rules @pro', async ({ request }) => {
    > 78 |         let allQuoteRuleIds = (await apiUtils.getAllQuoteRules()).map((a: { id: any }) => a.id)
         |                                                                   ^
      79 |         // console.log(allQuoteRuleIds)
      80 |
      81 |         let response = await request.put(endPoints.updateBatchQuoteRules, { data: { trash: allQuoteRuleIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:78:67

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      76 |
      77 |     test('update batch quote rules @pro', async ({ request }) => {
    > 78 |         let allQuoteRuleIds = (await apiUtils.getAllQuoteRules()).map((a: { id: any }) => a.id)
         |                                                                   ^
      79 |         // console.log(allQuoteRuleIds)
      80 |
      81 |         let response = await request.put(endPoints.updateBatchQuoteRules, { data: { trash: allQuoteRuleIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:78:67

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      76 |
      77 |     test('update batch quote rules @pro', async ({ request }) => {
    > 78 |         let allQuoteRuleIds = (await apiUtils.getAllQuoteRules()).map((a: { id: any }) => a.id)
         |                                                                   ^
      79 |         // console.log(allQuoteRuleIds)
      80 |
      81 |         let response = await request.put(endPoints.updateBatchQuoteRules, { data: { trash: allQuoteRuleIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/quoteRules.spec.ts:78:67
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="refunds.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="0" skipped="6" time="0.001" errors="0">
<testcase name="refunds api test get all refunds @pro" classname="refunds.spec.ts › refunds api test › get all refunds @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test get all refunds by status @pro" classname="refunds.spec.ts › refunds api test › get all refunds by status @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test approve a refund @pro" classname="refunds.spec.ts › refunds api test › approve a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test cancel a refund @pro" classname="refunds.spec.ts › refunds api test › cancel a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test delete a refund @pro" classname="refunds.spec.ts › refunds api test › delete a refund @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="refunds api test update batch refunds @pro" classname="refunds.spec.ts › refunds api test › update batch refunds @pro" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="reports.spec.ts" timestamp="1674073035097" hostname="" tests="4" failures="4" skipped="0" time="1.484" errors="0">
<testcase name="report api test get sales overview report" classname="reports.spec.ts › report api test › get sales overview report" time="0.367">
<failure message="reports.spec.ts:21:9 get sales overview report" type="FAILURE">
<![CDATA[  reports.spec.ts:21:9 › report api test › get sales overview report ===============================

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getSalesOverviewReport)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get summary report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:24:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getSalesOverviewReport)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get summary report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:24:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      22 |         let response = await request.get(endPoints.getSalesOverviewReport)
      23 |         let responseBody = await apiUtils.getResponseBody(response)
    > 24 |         expect(response.ok()).toBeTruthy()
         |                               ^
      25 |     });
      26 |
      27 |     test('get summary report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:24:31
]]>
</failure>
</testcase>
<testcase name="report api test get summary report" classname="reports.spec.ts › report api test › get summary report" time="0.378">
<failure message="reports.spec.ts:27:9 get summary report" type="FAILURE">
<![CDATA[  reports.spec.ts:27:9 › report api test › get summary report ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getSummaryReport)
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get top earners report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:30:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getSummaryReport)
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get top earners report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:30:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      28 |         let response = await request.get(endPoints.getSummaryReport)
      29 |         let responseBody = await apiUtils.getResponseBody(response)
    > 30 |         expect(response.ok()).toBeTruthy()
         |                               ^
      31 |     });
      32 |
      33 |     test('get top earners report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:30:31
]]>
</failure>
</testcase>
<testcase name="report api test get top earners report" classname="reports.spec.ts › report api test › get top earners report" time="0.369">
<failure message="reports.spec.ts:33:9 get top earners report" type="FAILURE">
<![CDATA[  reports.spec.ts:33:9 › report api test › get top earners report ==================================

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getTopEarnersReport)
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('get top selling products report ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:36:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getTopEarnersReport)
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('get top selling products report ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:36:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      34 |         let response = await request.get(endPoints.getTopEarnersReport)
      35 |         let responseBody = await apiUtils.getResponseBody(response)
    > 36 |         expect(response.ok()).toBeTruthy()
         |                               ^
      37 |     });
      38 |
      39 |     test('get top selling products report ', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:36:31
]]>
</failure>
</testcase>
<testcase name="report api test get top selling products report " classname="reports.spec.ts › report api test › get top selling products report " time="0.37">
<failure message="reports.spec.ts:39:9 get top selling products report " type="FAILURE">
<![CDATA[  reports.spec.ts:39:9 › report api test › get top selling products report  ========================

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.get(endPoints.getTopSellingProductsReport)
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:42:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.get(endPoints.getTopSellingProductsReport)
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:42:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      40 |         let response = await request.get(endPoints.getTopSellingProductsReport)
      41 |         let responseBody = await apiUtils.getResponseBody(response)
    > 42 |         expect(response.ok()).toBeTruthy()
         |                               ^
      43 |     });
      44 |
      45 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/reports.spec.ts:42:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="reverseWithdrawal.spec.ts" timestamp="1674073035097" hostname="" tests="4" failures="1" skipped="3" time="0.37" errors="0">
<testcase name="reverse withdrawal api test get reverse withdrawal transaction types" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get reverse withdrawal transaction types" time="0.369">
<failure message="reverseWithdrawal.spec.ts:23:9 get reverse withdrawal transaction types" type="FAILURE">
<![CDATA[  reverseWithdrawal.spec.ts:23:9 › reverse withdrawal api test › get reverse withdrawal transaction types 

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getReverseWithdrawalTransactionTypes)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test.skip('get all reverse withdrawal stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reverseWithdrawal.spec.ts:26:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getReverseWithdrawalTransactionTypes)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test.skip('get all reverse withdrawal stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reverseWithdrawal.spec.ts:26:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      24 |         let response = await request.get(endPoints.getReverseWithdrawalTransactionTypes)
      25 |         let responseBody = await apiUtils.getResponseBody(response)
    > 26 |         expect(response.ok()).toBeTruthy()
         |                               ^
      27 |     });
      28 |
      29 |     test.skip('get all reverse withdrawal stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/reverseWithdrawal.spec.ts:26:31
]]>
</failure>
</testcase>
<testcase name="reverse withdrawal api test get all reverse withdrawal stores" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get all reverse withdrawal stores" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="reverse withdrawal api test get all reverse withdrawal store balance" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › get all reverse withdrawal store balance" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="reverse withdrawal api test getAllReverseWithdrawalTransactions" classname="reverseWithdrawal.spec.ts › reverse withdrawal api test › getAllReverseWithdrawalTransactions" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="roles.spec.ts" timestamp="1674073035097" hostname="" tests="1" failures="1" skipped="0" time="0.496" errors="0">
<testcase name="roles api test get all user roles " classname="roles.spec.ts › roles api test › get all user roles " time="0.496">
<failure message="roles.spec.ts:19:9 get all user roles " type="FAILURE">
<![CDATA[  roles.spec.ts:19:9 › roles api test › get all user roles  ========================================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAllUserRoles)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/roles.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAllUserRoles)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/roles.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getAllUserRoles)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/roles.spec.ts:22:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="settings.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="2" skipped="0" time="0.992" errors="0">
<testcase name="settings api test get settings" classname="settings.spec.ts › settings api test › get settings" time="0.497">
<failure message="settings.spec.ts:25:9 get settings" type="FAILURE">
<![CDATA[  settings.spec.ts:25:9 › settings api test › get settings =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('update settings', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('update settings', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('update settings', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="settings api test update settings" classname="settings.spec.ts › settings api test › update settings" time="0.495">
<failure message="settings.spec.ts:31:9 update settings" type="FAILURE">
<![CDATA[  settings.spec.ts:31:9 › settings api test › update settings ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.put(endPoints.updateSettings, { data: payloads.updateSettings })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.put(endPoints.updateSettings, { data: payloads.updateSettings })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.put(endPoints.updateSettings, { data: payloads.updateSettings })
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/settings.spec.ts:34:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="storeCategories.spec.ts" timestamp="1674073035097" hostname="" tests="7" failures="0" skipped="7" time="0.001" errors="0">
<testcase name="store categories api test get default store category @pro" classname="storeCategories.spec.ts › store categories api test › get default store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test get all store categories @pro" classname="storeCategories.spec.ts › store categories api test › get all store categories @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test get single store category @pro" classname="storeCategories.spec.ts › store categories api test › get single store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test create a store category @pro" classname="storeCategories.spec.ts › store categories api test › create a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test update a store category @pro" classname="storeCategories.spec.ts › store categories api test › update a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test delete a store category @pro" classname="storeCategories.spec.ts › store categories api test › delete a store category @pro" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="store categories api test set default store category @pro" classname="storeCategories.spec.ts › store categories api test › set default store category @pro" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="storeReviews.spec.ts" timestamp="1674073035097" hostname="" tests="6" failures="6" skipped="0" time="2.184" errors="0">
<testcase name="store reviews api test get all store reviews @pro" classname="storeReviews.spec.ts › store reviews api test › get all store reviews @pro" time="0.366">
<failure message="storeReviews.spec.ts:25:9 get all store reviews @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:25:9 › store reviews api test › get all store reviews @pro ==================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllStoreReviews)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllStoreReviews)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getAllStoreReviews)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="store reviews api test get single store review @pro" classname="storeReviews.spec.ts › store reviews api test › get single store review @pro" time="0.364">
<failure message="storeReviews.spec.ts:31:9 get single store review @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:31:9 › store reviews api test › get single store review @pro ================

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleStoreReview(reviewId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:38:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleStoreReview(reviewId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:38:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      36 |         let response = await request.get(endPoints.getSingleStoreReview(reviewId))
      37 |         let responseBody = await apiUtils.getResponseBody(response)
    > 38 |         expect(response.ok()).toBeTruthy()
         |                               ^
      39 |     });
      40 |
      41 |     test('update a store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:38:31
]]>
</failure>
</testcase>
<testcase name="store reviews api test update a store review @pro" classname="storeReviews.spec.ts › store reviews api test › update a store review @pro" time="0.365">
<failure message="storeReviews.spec.ts:41:9 update a store review @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:41:9 › store reviews api test › update a store review @pro ==================

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateStoreReview })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |
      50 |     });
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:48:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateStoreReview })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |
      50 |     });
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:48:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      46 |         let response = await request.put(endPoints.updateStoreReview(reviewId), { data: payloads.updateStoreReview })
      47 |         let responseBody = await apiUtils.getResponseBody(response)
    > 48 |         expect(response.ok()).toBeTruthy()
         |                               ^
      49 |
      50 |     });
      51 |

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:48:31
]]>
</failure>
</testcase>
<testcase name="store reviews api test delete a store review  @pro" classname="storeReviews.spec.ts › store reviews api test › delete a store review  @pro" time="0.366">
<failure message="storeReviews.spec.ts:52:9 delete a store review  @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:52:9 › store reviews api test › delete a store review  @pro =================

    Error: expect(received).toBeTruthy()

    Received: false

      57 |         let response = await request.delete(endPoints.deleteStoreReview(reviewId))
      58 |         let responseBody = await apiUtils.getResponseBody(response)
    > 59 |         expect(response.ok()).toBeTruthy()
         |                               ^
      60 |     });
      61 |
      62 |     test('restore a deleted store review  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:59:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      57 |         let response = await request.delete(endPoints.deleteStoreReview(reviewId))
      58 |         let responseBody = await apiUtils.getResponseBody(response)
    > 59 |         expect(response.ok()).toBeTruthy()
         |                               ^
      60 |     });
      61 |
      62 |     test('restore a deleted store review  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:59:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      57 |         let response = await request.delete(endPoints.deleteStoreReview(reviewId))
      58 |         let responseBody = await apiUtils.getResponseBody(response)
    > 59 |         expect(response.ok()).toBeTruthy()
         |                               ^
      60 |     });
      61 |
      62 |     test('restore a deleted store review  @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:59:31
]]>
</failure>
</testcase>
<testcase name="store reviews api test restore a deleted store review  @pro" classname="storeReviews.spec.ts › store reviews api test › restore a deleted store review  @pro" time="0.364">
<failure message="storeReviews.spec.ts:62:9 restore a deleted store review  @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:62:9 › store reviews api test › restore a deleted store review  @pro ========

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.put(endPoints.restoreDeletedStoreReview(reviewId))
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:70:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.put(endPoints.restoreDeletedStoreReview(reviewId))
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:70:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      68 |         let response = await request.put(endPoints.restoreDeletedStoreReview(reviewId))
      69 |         let responseBody = await apiUtils.getResponseBody(response)
    > 70 |         expect(response.ok()).toBeTruthy()
         |                               ^
      71 |     });
      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:70:31
]]>
</failure>
</testcase>
<testcase name="store reviews api test update batch store review @pro" classname="storeReviews.spec.ts › store reviews api test › update batch store review @pro" time="0.359">
<failure message="storeReviews.spec.ts:73:9 update batch store review @pro" type="FAILURE">
<![CDATA[  storeReviews.spec.ts:73:9 › store reviews api test › update batch store review @pro ==============

    TypeError: (intermediate value).map is not a function

      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {
    > 74 |         let allStoreReviewIds = (await apiUtils.getAllStoreReviews()).map((a: { id: any }) => a.id)
         |                                                                       ^
      75 |         // console.log(allStoreReviewIds)
      76 |
      77 |         let response = await request.put(endPoints.updateBatchStoreReviews, { data: { trash: allStoreReviewIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:74:71

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {
    > 74 |         let allStoreReviewIds = (await apiUtils.getAllStoreReviews()).map((a: { id: any }) => a.id)
         |                                                                       ^
      75 |         // console.log(allStoreReviewIds)
      76 |
      77 |         let response = await request.put(endPoints.updateBatchStoreReviews, { data: { trash: allStoreReviewIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:74:71

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      72 |
      73 |     test('update batch store review @pro', async ({ request }) => {
    > 74 |         let allStoreReviewIds = (await apiUtils.getAllStoreReviews()).map((a: { id: any }) => a.id)
         |                                                                       ^
      75 |         // console.log(allStoreReviewIds)
      76 |
      77 |         let response = await request.put(endPoints.updateBatchStoreReviews, { data: { trash: allStoreReviewIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/storeReviews.spec.ts:74:71
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="stores.spec.ts" timestamp="1674073035097" hostname="" tests="16" failures="14" skipped="0" time="6.787" errors="0">
<testcase name="stores api test get store availability status" classname="stores.spec.ts › stores api test › get store availability status" time="0.127">
</testcase>
<testcase name="stores api test get all stores" classname="stores.spec.ts › stores api test › get all stores" time="0.122">
</testcase>
<testcase name="stores api test get single store" classname="stores.spec.ts › stores api test › get single store" time="0.366">
<failure message="stores.spec.ts:89:9 get single store" type="FAILURE">
<![CDATA[  stores.spec.ts:89:9 › stores api test › get single store =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      92 |         let response = await request.get(endPoints.getSingleStore(sellerId))
      93 |         let responseBody = await apiUtils.getResponseBody(response)
    > 94 |         expect(response.ok()).toBeTruthy()
         |                               ^
      95 |         // expect(responseBody1).toEqual(expect.objectContaining(
      96 |         // {
      97 |         // id: expect.any(Number),

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:94:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      92 |         let response = await request.get(endPoints.getSingleStore(sellerId))
      93 |         let responseBody = await apiUtils.getResponseBody(response)
    > 94 |         expect(response.ok()).toBeTruthy()
         |                               ^
      95 |         // expect(responseBody1).toEqual(expect.objectContaining(
      96 |         // {
      97 |         // id: expect.any(Number),

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:94:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      92 |         let response = await request.get(endPoints.getSingleStore(sellerId))
      93 |         let responseBody = await apiUtils.getResponseBody(response)
    > 94 |         expect(response.ok()).toBeTruthy()
         |                               ^
      95 |         // expect(responseBody1).toEqual(expect.objectContaining(
      96 |         // {
      97 |         // id: expect.any(Number),

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:94:31
]]>
</failure>
</testcase>
<testcase name="stores api test create a store" classname="stores.spec.ts › stores api test › create a store" time="0.372">
<failure message="stores.spec.ts:144:9 create a store" type="FAILURE">
<![CDATA[  stores.spec.ts:144:9 › stores api test › create a store ==========================================

    Error: expect(received).toBeTruthy()

    Received: false

      145 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore() })
      146 |         let responseBody = await apiUtils.getResponseBody(response)
    > 147 |         expect(response.ok()).toBeTruthy()
          |                               ^
      148 |     });
      149 |
      150 |     test('update a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:147:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      145 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore() })
      146 |         let responseBody = await apiUtils.getResponseBody(response)
    > 147 |         expect(response.ok()).toBeTruthy()
          |                               ^
      148 |     });
      149 |
      150 |     test('update a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:147:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      145 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore() })
      146 |         let responseBody = await apiUtils.getResponseBody(response)
    > 147 |         expect(response.ok()).toBeTruthy()
          |                               ^
      148 |     });
      149 |
      150 |     test('update a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:147:31
]]>
</failure>
</testcase>
<testcase name="stores api test update a store" classname="stores.spec.ts › stores api test › update a store" time="0.369">
<failure message="stores.spec.ts:150:9 update a store" type="FAILURE">
<![CDATA[  stores.spec.ts:150:9 › stores api test › update a store ==========================================

    Error: expect(received).toBeTruthy()

    Received: false

      153 |         let response = await request.put(endPoints.updateStore(sellerId), { data: payloads.updateStore() })
      154 |         let responseBody = await apiUtils.getResponseBody(response)
    > 155 |         expect(response.ok()).toBeTruthy()
          |                               ^
      156 |     });
      157 |
      158 |     test('delete a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:155:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      153 |         let response = await request.put(endPoints.updateStore(sellerId), { data: payloads.updateStore() })
      154 |         let responseBody = await apiUtils.getResponseBody(response)
    > 155 |         expect(response.ok()).toBeTruthy()
          |                               ^
      156 |     });
      157 |
      158 |     test('delete a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:155:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      153 |         let response = await request.put(endPoints.updateStore(sellerId), { data: payloads.updateStore() })
      154 |         let responseBody = await apiUtils.getResponseBody(response)
    > 155 |         expect(response.ok()).toBeTruthy()
          |                               ^
      156 |     });
      157 |
      158 |     test('delete a store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:155:31
]]>
</failure>
</testcase>
<testcase name="stores api test delete a store" classname="stores.spec.ts › stores api test › delete a store" time="0.707">
<failure message="stores.spec.ts:158:9 delete a store" type="FAILURE">
<![CDATA[  stores.spec.ts:158:9 › stores api test › delete a store ==========================================

    Error: expect(received).toBeTruthy()

    Received: false

      161 |         let response = await request.delete(endPoints.deleteStore(sId))
      162 |         let responseBody = await apiUtils.getResponseBody(response)
    > 163 |         expect(response.ok()).toBeTruthy()
          |                               ^
      164 |     });
      165 |
      166 |     test('get store current visitor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:163:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      161 |         let response = await request.delete(endPoints.deleteStore(sId))
      162 |         let responseBody = await apiUtils.getResponseBody(response)
    > 163 |         expect(response.ok()).toBeTruthy()
          |                               ^
      164 |     });
      165 |
      166 |     test('get store current visitor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:163:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      161 |         let response = await request.delete(endPoints.deleteStore(sId))
      162 |         let responseBody = await apiUtils.getResponseBody(response)
    > 163 |         expect(response.ok()).toBeTruthy()
          |                               ^
      164 |     });
      165 |
      166 |     test('get store current visitor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:163:31
]]>
</failure>
</testcase>
<testcase name="stores api test get store current visitor" classname="stores.spec.ts › stores api test › get store current visitor" time="0.367">
<failure message="stores.spec.ts:166:9 get store current visitor" type="FAILURE">
<![CDATA[  stores.spec.ts:166:9 › stores api test › get store current visitor ===============================

    Error: expect(received).toBeTruthy()

    Received: false

      167 |         let response = await request.get(endPoints.getStoreCurrentVisitor)
      168 |         let responseBody = await apiUtils.getResponseBody(response)
    > 169 |         expect(response.ok()).toBeTruthy()
          |                               ^
      170 |     });
      171 |
      172 |     test('get store stats', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:169:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      167 |         let response = await request.get(endPoints.getStoreCurrentVisitor)
      168 |         let responseBody = await apiUtils.getResponseBody(response)
    > 169 |         expect(response.ok()).toBeTruthy()
          |                               ^
      170 |     });
      171 |
      172 |     test('get store stats', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:169:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      167 |         let response = await request.get(endPoints.getStoreCurrentVisitor)
      168 |         let responseBody = await apiUtils.getResponseBody(response)
    > 169 |         expect(response.ok()).toBeTruthy()
          |                               ^
      170 |     });
      171 |
      172 |     test('get store stats', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:169:31
]]>
</failure>
</testcase>
<testcase name="stores api test get store stats" classname="stores.spec.ts › stores api test › get store stats" time="0.369">
<failure message="stores.spec.ts:172:9 get store stats" type="FAILURE">
<![CDATA[  stores.spec.ts:172:9 › stores api test › get store stats =========================================

    Error: expect(received).toBeTruthy()

    Received: false

      175 |         let response = await request.get(endPoints.getStoreStats(sellerId))
      176 |         let responseBody = await apiUtils.getResponseBody(response)
    > 177 |         expect(response.ok()).toBeTruthy()
          |                               ^
      178 |     });
      179 |
      180 |     test('get store categories', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:177:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      175 |         let response = await request.get(endPoints.getStoreStats(sellerId))
      176 |         let responseBody = await apiUtils.getResponseBody(response)
    > 177 |         expect(response.ok()).toBeTruthy()
          |                               ^
      178 |     });
      179 |
      180 |     test('get store categories', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:177:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      175 |         let response = await request.get(endPoints.getStoreStats(sellerId))
      176 |         let responseBody = await apiUtils.getResponseBody(response)
    > 177 |         expect(response.ok()).toBeTruthy()
          |                               ^
      178 |     });
      179 |
      180 |     test('get store categories', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:177:31
]]>
</failure>
</testcase>
<testcase name="stores api test get store categories" classname="stores.spec.ts › stores api test › get store categories" time="0.371">
<failure message="stores.spec.ts:180:9 get store categories" type="FAILURE">
<![CDATA[  stores.spec.ts:180:9 › stores api test › get store categories ====================================

    Error: expect(received).toBeTruthy()

    Received: false

      183 |         let response = await request.get(endPoints.getStoreCategories(sellerId))
      184 |         let responseBody = await apiUtils.getResponseBody(response)
    > 185 |         expect(response.ok()).toBeTruthy()
          |                               ^
      186 |     });
      187 |
      188 |     test('get store products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:185:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      183 |         let response = await request.get(endPoints.getStoreCategories(sellerId))
      184 |         let responseBody = await apiUtils.getResponseBody(response)
    > 185 |         expect(response.ok()).toBeTruthy()
          |                               ^
      186 |     });
      187 |
      188 |     test('get store products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:185:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      183 |         let response = await request.get(endPoints.getStoreCategories(sellerId))
      184 |         let responseBody = await apiUtils.getResponseBody(response)
    > 185 |         expect(response.ok()).toBeTruthy()
          |                               ^
      186 |     });
      187 |
      188 |     test('get store products', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:185:31
]]>
</failure>
</testcase>
<testcase name="stores api test get store products" classname="stores.spec.ts › stores api test › get store products" time="1.064">
<failure message="stores.spec.ts:188:9 get store products" type="FAILURE">
<![CDATA[  stores.spec.ts:188:9 › stores api test › get store products ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      193 |         let response = await request.get(endPoints.getStoreProducts(sId))
      194 |         let responseBody = await apiUtils.getResponseBody(response)
    > 195 |         expect(response.ok()).toBeTruthy()
          |                               ^
      196 |     });
      197 |
      198 |     test('get store reviews', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:195:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      193 |         let response = await request.get(endPoints.getStoreProducts(sId))
      194 |         let responseBody = await apiUtils.getResponseBody(response)
    > 195 |         expect(response.ok()).toBeTruthy()
          |                               ^
      196 |     });
      197 |
      198 |     test('get store reviews', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:195:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      193 |         let response = await request.get(endPoints.getStoreProducts(sId))
      194 |         let responseBody = await apiUtils.getResponseBody(response)
    > 195 |         expect(response.ok()).toBeTruthy()
          |                               ^
      196 |     });
      197 |
      198 |     test('get store reviews', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:195:31
]]>
</failure>
</testcase>
<testcase name="stores api test get store reviews" classname="stores.spec.ts › stores api test › get store reviews" time="0.362">
<failure message="stores.spec.ts:198:9 get store reviews" type="FAILURE">
<![CDATA[  stores.spec.ts:198:9 › stores api test › get store reviews =======================================

    Error: expect(received).toBeTruthy()

    Received: false

      203 |         let response = await request.get(endPoints.getStoreReviews(sellerId))
      204 |         let responseBody = await apiUtils.getResponseBody(response)
    > 205 |         expect(response.ok()).toBeTruthy()
          |                               ^
      206 |     });
      207 |
      208 |     test('create a store review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:205:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      203 |         let response = await request.get(endPoints.getStoreReviews(sellerId))
      204 |         let responseBody = await apiUtils.getResponseBody(response)
    > 205 |         expect(response.ok()).toBeTruthy()
          |                               ^
      206 |     });
      207 |
      208 |     test('create a store review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:205:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      203 |         let response = await request.get(endPoints.getStoreReviews(sellerId))
      204 |         let responseBody = await apiUtils.getResponseBody(response)
    > 205 |         expect(response.ok()).toBeTruthy()
          |                               ^
      206 |     });
      207 |
      208 |     test('create a store review', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:205:31
]]>
</failure>
</testcase>
<testcase name="stores api test create a store review" classname="stores.spec.ts › stores api test › create a store review" time="0.37">
<failure message="stores.spec.ts:208:9 create a store review" type="FAILURE">
<![CDATA[  stores.spec.ts:208:9 › stores api test › create a store review ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      211 |         let response = await request.post(endPoints.createStoreReview(sellerId), { data: payloads.createStoreReview })
      212 |         let responseBody = await apiUtils.getResponseBody(response)
    > 213 |         expect(response.ok()).toBeTruthy()
          |                               ^
      214 |     });
      215 |
      216 |     test('update a store status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:213:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      211 |         let response = await request.post(endPoints.createStoreReview(sellerId), { data: payloads.createStoreReview })
      212 |         let responseBody = await apiUtils.getResponseBody(response)
    > 213 |         expect(response.ok()).toBeTruthy()
          |                               ^
      214 |     });
      215 |
      216 |     test('update a store status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:213:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      211 |         let response = await request.post(endPoints.createStoreReview(sellerId), { data: payloads.createStoreReview })
      212 |         let responseBody = await apiUtils.getResponseBody(response)
    > 213 |         expect(response.ok()).toBeTruthy()
          |                               ^
      214 |     });
      215 |
      216 |     test('update a store status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:213:31
]]>
</failure>
</testcase>
<testcase name="stores api test update a store status" classname="stores.spec.ts › stores api test › update a store status" time="0.367">
<failure message="stores.spec.ts:216:9 update a store status" type="FAILURE">
<![CDATA[  stores.spec.ts:216:9 › stores api test › update a store status ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      219 |         let response = await request.put(endPoints.updateStoreStatus(sellerId), { data: payloads.updateStoreStatus })
      220 |         let responseBody = await apiUtils.getResponseBody(response)
    > 221 |         expect(response.ok()).toBeTruthy()
          |                               ^
      222 |     });
      223 |
      224 |     test('admin contact store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:221:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      219 |         let response = await request.put(endPoints.updateStoreStatus(sellerId), { data: payloads.updateStoreStatus })
      220 |         let responseBody = await apiUtils.getResponseBody(response)
    > 221 |         expect(response.ok()).toBeTruthy()
          |                               ^
      222 |     });
      223 |
      224 |     test('admin contact store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:221:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      219 |         let response = await request.put(endPoints.updateStoreStatus(sellerId), { data: payloads.updateStoreStatus })
      220 |         let responseBody = await apiUtils.getResponseBody(response)
    > 221 |         expect(response.ok()).toBeTruthy()
          |                               ^
      222 |     });
      223 |
      224 |     test('admin contact store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:221:31
]]>
</failure>
</testcase>
<testcase name="stores api test admin contact store" classname="stores.spec.ts › stores api test › admin contact store" time="0.366">
<failure message="stores.spec.ts:224:9 admin contact store" type="FAILURE">
<![CDATA[  stores.spec.ts:224:9 › stores api test › admin contact store =====================================

    Error: expect(received).toBeTruthy()

    Received: false

      227 |         let response = await request.post(endPoints.adminContactStore(sellerId), { data: payloads.adminContactStore })
      228 |         let responseBody = await apiUtils.getResponseBody(response)
    > 229 |         expect(response.ok()).toBeTruthy()
          |                               ^
      230 |     });
      231 |
      232 |     test('admin email store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:229:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      227 |         let response = await request.post(endPoints.adminContactStore(sellerId), { data: payloads.adminContactStore })
      228 |         let responseBody = await apiUtils.getResponseBody(response)
    > 229 |         expect(response.ok()).toBeTruthy()
          |                               ^
      230 |     });
      231 |
      232 |     test('admin email store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:229:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      227 |         let response = await request.post(endPoints.adminContactStore(sellerId), { data: payloads.adminContactStore })
      228 |         let responseBody = await apiUtils.getResponseBody(response)
    > 229 |         expect(response.ok()).toBeTruthy()
          |                               ^
      230 |     });
      231 |
      232 |     test('admin email store', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:229:31
]]>
</failure>
</testcase>
<testcase name="stores api test admin email store" classname="stores.spec.ts › stores api test › admin email store" time="0.37">
<failure message="stores.spec.ts:232:9 admin email store" type="FAILURE">
<![CDATA[  stores.spec.ts:232:9 › stores api test › admin email store =======================================

    Error: expect(received).toBeTruthy()

    Received: false

      235 |         let response = await request.post(endPoints.adminEmailStore(sellerId), { data: payloads.adminEmailStore })
      236 |         let responseBody = await apiUtils.getResponseBody(response)
    > 237 |         expect(response.ok()).toBeTruthy()
          |                               ^
      238 |     });
      239 |
      240 |     test('update batch stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:237:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      235 |         let response = await request.post(endPoints.adminEmailStore(sellerId), { data: payloads.adminEmailStore })
      236 |         let responseBody = await apiUtils.getResponseBody(response)
    > 237 |         expect(response.ok()).toBeTruthy()
          |                               ^
      238 |     });
      239 |
      240 |     test('update batch stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:237:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      235 |         let response = await request.post(endPoints.adminEmailStore(sellerId), { data: payloads.adminEmailStore })
      236 |         let responseBody = await apiUtils.getResponseBody(response)
    > 237 |         expect(response.ok()).toBeTruthy()
          |                               ^
      238 |     });
      239 |
      240 |     test('update batch stores', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:237:31
]]>
</failure>
</testcase>
<testcase name="stores api test update batch stores" classname="stores.spec.ts › stores api test › update batch stores" time="0.718">
<failure message="stores.spec.ts:240:9 update batch stores" type="FAILURE">
<![CDATA[  stores.spec.ts:240:9 › stores api test › update batch stores =====================================

    Error: expect(received).toBeTruthy()

    Received: false

      244 |         let response = await request.put(endPoints.updateBatchStores, { data: { approved: allStoreIds } })
      245 |         let responseBody = await apiUtils.getResponseBody(response)
    > 246 |         expect(response.ok()).toBeTruthy()
          |                               ^
      247 |
      248 |     });
      249 |

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:246:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      244 |         let response = await request.put(endPoints.updateBatchStores, { data: { approved: allStoreIds } })
      245 |         let responseBody = await apiUtils.getResponseBody(response)
    > 246 |         expect(response.ok()).toBeTruthy()
          |                               ^
      247 |
      248 |     });
      249 |

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:246:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      244 |         let response = await request.put(endPoints.updateBatchStores, { data: { approved: allStoreIds } })
      245 |         let responseBody = await apiUtils.getResponseBody(response)
    > 246 |         expect(response.ok()).toBeTruthy()
          |                               ^
      247 |
      248 |     });
      249 |

        at /home/runner/work/dokan/dokan/tests/api/tests/stores.spec.ts:246:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="supportTickets.spec.ts" timestamp="1674073035097" hostname="" tests="8" failures="0" skipped="8" time="0.001" errors="0">
<testcase name="support ticket api test get all support ticket customers" classname="supportTickets.spec.ts › support ticket api test › get all support ticket customers" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test get all support tickets" classname="supportTickets.spec.ts › support ticket api test › get all support tickets" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test get single support ticket" classname="supportTickets.spec.ts › support ticket api test › get single support ticket" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test create a support ticket comment" classname="supportTickets.spec.ts › support ticket api test › create a support ticket comment" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update support ticket status" classname="supportTickets.spec.ts › support ticket api test › update support ticket status" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update a support ticket email notification" classname="supportTickets.spec.ts › support ticket api test › update a support ticket email notification" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test delete a support ticket comment" classname="supportTickets.spec.ts › support ticket api test › delete a support ticket comment" time="0">
<skipped>
</skipped>
</testcase>
<testcase name="support ticket api test update batch support tickets" classname="supportTickets.spec.ts › support ticket api test › update batch support tickets" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/orderDownloads.spec.ts" timestamp="1674073035097" hostname="" tests="1" failures="0" skipped="1" time="0" errors="0">
<testcase name="order downloads api test get all order downloads @v2" classname="v2/orderDownloads.spec.ts › order downloads api test › get all order downloads @v2" time="0">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/orders.spec.ts" timestamp="1674073035097" hostname="" tests="1" failures="1" skipped="0" time="0.36" errors="0">
<testcase name="orders api test update batch orders @v2" classname="v2/orders.spec.ts › orders api test › update batch orders @v2" time="0.36">
<failure message="orders.spec.ts:23:9 update batch orders @v2" type="FAILURE">
<![CDATA[  v2/orders.spec.ts:23:9 › orders api test › update batch orders @v2 ===============================

    TypeError: (intermediate value).map is not a function

      22 |
      23 |     test('update batch orders @v2', async ({ request }) => {
    > 24 |         let allOrderIds = (await apiUtils.getAllOrders()).map((a: { id: any }) => a.id)
         |                                                           ^
      25 |         // console.log(allOrderIds)
      26 |         
      27 |         let response = await request.post(endPoints.updateBatchOrders, { data: { order_ids: allOrderIds, status: "wc-completed" } })

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orders.spec.ts:24:59

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      22 |
      23 |     test('update batch orders @v2', async ({ request }) => {
    > 24 |         let allOrderIds = (await apiUtils.getAllOrders()).map((a: { id: any }) => a.id)
         |                                                           ^
      25 |         // console.log(allOrderIds)
      26 |         
      27 |         let response = await request.post(endPoints.updateBatchOrders, { data: { order_ids: allOrderIds, status: "wc-completed" } })

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orders.spec.ts:24:59

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      22 |
      23 |     test('update batch orders @v2', async ({ request }) => {
    > 24 |         let allOrderIds = (await apiUtils.getAllOrders()).map((a: { id: any }) => a.id)
         |                                                           ^
      25 |         // console.log(allOrderIds)
      26 |         
      27 |         let response = await request.post(endPoints.updateBatchOrders, { data: { order_ids: allOrderIds, status: "wc-completed" } })

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/orders.spec.ts:24:59
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/productFilter.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="0" skipped="0" time="0.242" errors="0">
<testcase name="product filter api test get products filter by data @v2" classname="v2/productFilter.spec.ts › product filter api test › get products filter by data @v2" time="0.125">
</testcase>
<testcase name="product filter api test get filtered products @v2" classname="v2/productFilter.spec.ts › product filter api test › get filtered products @v2" time="0.117">
</testcase>
</testsuite>
<testsuite name="v2/setttingsGroup.spec.ts" timestamp="1674073035097" hostname="" tests="7" failures="7" skipped="0" time="3.475" errors="0">
<testcase name="new settings api test get store settings @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get store settings @v2" time="0.451">
<failure message="setttingsGroup.spec.ts:25:9 get store settings @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:25:9 › new settings api test › get store settings @v2 ==================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getStoreSettings)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get single setting group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get single setting group @v2" time="0.505">
<failure message="setttingsGroup.spec.ts:31:9 get single setting group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:31:9 › new settings api test › get single setting group @v2 ============

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getSingleSettingGroup('store'))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('update single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getSingleSettingGroup('store'))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('update single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getSingleSettingGroup('store'))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('update single setting group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:34:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update single setting group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update single setting group @v2" time="0.504">
<failure message="setttingsGroup.spec.ts:37:9 update single setting group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:37:9 › new settings api test › update single setting group @v2 =========

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.updateSingleSettingGroup('store'), { data: payloads.updateSettingsGroup })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.updateSingleSettingGroup('store'), { data: payloads.updateSettingsGroup })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.post(endPoints.updateSingleSettingGroup('store'), { data: payloads.updateSettingsGroup })
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get sub settings from single settings group @v2" time="0.498">
<failure message="setttingsGroup.spec.ts:43:9 get sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:43:9 › new settings api test › get sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSubSettingFromSingleSettingGroup('store', 'store_name'))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSubSettingFromSingleSettingGroup('store', 'store_name'))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getSubSettingFromSingleSettingGroup('store', 'store_name'))
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('update sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update sub settings from single settings group @v2" time="0.516">
<failure message="setttingsGroup.spec.ts:49:9 update sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:49:9 › new settings api test › update sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.post(endPoints.updateSubSettingFromSingleSettingGroup('store', 'store_name'), { data: payloads.updateSubSettingFromSingleSettingGroup })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:52:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.post(endPoints.updateSubSettingFromSingleSettingGroup('store', 'store_name'), { data: payloads.updateSubSettingFromSingleSettingGroup })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:52:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.post(endPoints.updateSubSettingFromSingleSettingGroup('store', 'store_name'), { data: payloads.updateSubSettingFromSingleSettingGroup })
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="new settings api test get sub sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › get sub sub settings from single settings group @v2" time="0.494">
<failure message="setttingsGroup.spec.ts:55:9 get sub sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:55:9 › new settings api test › get sub sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('update sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:58:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('update sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:58:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'))
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 |     test('update sub sub settings from single settings group @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:58:31
]]>
</failure>
</testcase>
<testcase name="new settings api test update sub sub settings from single settings group @v2" classname="v2/setttingsGroup.spec.ts › new settings api test › update sub sub settings from single settings group @v2" time="0.507">
<failure message="setttingsGroup.spec.ts:61:9 update sub sub settings from single settings group @v2" type="FAILURE">
<![CDATA[  v2/setttingsGroup.spec.ts:61:9 › new settings api test › update sub sub settings from single settings group @v2 

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.post(endPoints.updateSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'), { data: payloads.updateSubSubSettingFromSingleSettingGroup })
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:64:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.post(endPoints.updateSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'), { data: payloads.updateSubSubSettingFromSingleSettingGroup })
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:64:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      62 |         let response = await request.post(endPoints.updateSubSubSettingFromSingleSettingGroup('store', 'address', 'street_1'), { data: payloads.updateSubSubSettingFromSingleSettingGroup })
      63 |         let responseBody = await apiUtils.getResponseBody(response)
    > 64 |         expect(response.ok()).toBeTruthy()
         |                               ^
      65 |     });
      66 |
      67 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/setttingsGroup.spec.ts:64:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1productAttribute.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="2" skipped="0" time="0.718" errors="0">
<testcase name="product attribute api test set default attribute" classname="v2/v1productAttribute.spec.ts › product attribute api test › set default attribute" time="0.359">
<failure message="v1productAttribute.spec.ts:31:9 set default attribute" type="FAILURE">
<![CDATA[  v2/v1productAttribute.spec.ts:31:9 › product attribute api test › set default attribute ==========

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:41:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:41:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.put(endPoints.setDefaultAttribute(productId), { data: { attributes: [payload] } })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('update product attribute', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:41:31
]]>
</failure>
</testcase>
<testcase name="product attribute api test update product attribute" classname="v2/v1productAttribute.spec.ts › product attribute api test › update product attribute" time="0.359">
<failure message="v1productAttribute.spec.ts:44:9 update product attribute" type="FAILURE">
<![CDATA[  v2/v1productAttribute.spec.ts:44:9 › product attribute api test › update product attribute =======

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.post(endPoints.updateProductAttribute(productId), { data: payload })
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:68:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.post(endPoints.updateProductAttribute(productId), { data: payload })
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:68:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      66 |         let response = await request.post(endPoints.updateProductAttribute(productId), { data: payload })
      67 |         let responseBody = await apiUtils.getResponseBody(response)
    > 68 |         expect(response.ok()).toBeTruthy()
         |                               ^
      69 |     });
      70 |
      71 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productAttribute.spec.ts:68:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1productBlock.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="2" skipped="0" time="0.709" errors="0">
<testcase name="product block api test get product block details" classname="v2/v1productBlock.spec.ts › product block api test › get product block details" time="0.354">
<failure message="v1productBlock.spec.ts:25:9 get product block details" type="FAILURE">
<![CDATA[  v2/v1productBlock.spec.ts:25:9 › product block api test › get product block details ==============

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getProductBlockDetails(productId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get variable product block details', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getProductBlockDetails(productId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get variable product block details', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getProductBlockDetails(productId))
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get variable product block details', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="product block api test get variable product block details" classname="v2/v1productBlock.spec.ts › product block api test › get variable product block details" time="0.355">
<failure message="v1productBlock.spec.ts:31:9 get variable product block details" type="FAILURE">
<![CDATA[  v2/v1productBlock.spec.ts:31:9 › product block api test › get variable product block details =====

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getProductBlockDetails(variationId))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getProductBlockDetails(variationId))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getProductBlockDetails(variationId))
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1productBlock.spec.ts:34:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/v1rankMath.spec.ts" timestamp="1674073035097" hostname="" tests="1" failures="0" skipped="1" time="0.001" errors="0">
<testcase name="rank math api test rank math" classname="v2/v1rankMath.spec.ts › rank math api test › rank math" time="0.001">
<skipped>
</skipped>
</testcase>
</testsuite>
<testsuite name="v2/v1vendorDashborad.spec.ts" timestamp="1674073035097" hostname="" tests="7" failures="7" skipped="0" time="3.388" errors="0">
<testcase name="vendor dashboard api test get vendor dashboard statistics" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor dashboard statistics" time="0.485">
<failure message="v1vendorDashborad.spec.ts:19:9 get vendor dashboard statistics" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:19:9 › vendor dashboard api test › get vendor dashboard statistics ==

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getVendorDashboardStatistics)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get vendor profile information', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getVendorDashboardStatistics)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get vendor profile information', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getVendorDashboardStatistics)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get vendor profile information', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor profile information" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor profile information" time="0.486">
<failure message="v1vendorDashborad.spec.ts:25:9 get vendor profile information" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:25:9 › vendor dashboard api test › get vendor profile information ===

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getVendorProfileInformation)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get vendor sales report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getVendorProfileInformation)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get vendor sales report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getVendorProfileInformation)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 |     test('get vendor sales report', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:28:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor sales report" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor sales report" time="0.484">
<failure message="v1vendorDashborad.spec.ts:31:9 get vendor sales report" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:31:9 › vendor dashboard api test › get vendor sales report ==========

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getVendorSalesReport)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get vendor product reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:34:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getVendorSalesReport)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get vendor product reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:34:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      32 |         let response = await request.get(endPoints.getVendorSalesReport)
      33 |         let responseBody = await apiUtils.getResponseBody(response)
    > 34 |         expect(response.ok()).toBeTruthy()
         |                               ^
      35 |     });
      36 |
      37 |     test('get vendor product reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:34:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor product reports summary" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor product reports summary" time="0.484">
<failure message="v1vendorDashborad.spec.ts:37:9 get vendor product reports summary" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:37:9 › vendor dashboard api test › get vendor product reports summary 

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getVendorProductReportsSummary)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get vendor order reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:40:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getVendorProductReportsSummary)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get vendor order reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:40:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      38 |         let response = await request.get(endPoints.getVendorProductReportsSummary)
      39 |         let responseBody = await apiUtils.getResponseBody(response)
    > 40 |         expect(response.ok()).toBeTruthy()
         |                               ^
      41 |     });
      42 |
      43 |     test('get vendor order reports summary', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:40:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor order reports summary" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor order reports summary" time="0.489">
<failure message="v1vendorDashborad.spec.ts:43:9 get vendor order reports summary" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:43:9 › vendor dashboard api test › get vendor order reports summary =

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getVendorOrderReportsSummary)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get vendor store preferences', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:46:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getVendorOrderReportsSummary)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get vendor store preferences', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:46:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      44 |         let response = await request.get(endPoints.getVendorOrderReportsSummary)
      45 |         let responseBody = await apiUtils.getResponseBody(response)
    > 46 |         expect(response.ok()).toBeTruthy()
         |                               ^
      47 |     });
      48 |
      49 |     test('get vendor store preferences', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:46:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor store preferences" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor store preferences" time="0.487">
<failure message="v1vendorDashborad.spec.ts:49:9 get vendor store preferences" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:49:9 › vendor dashboard api test › get vendor store preferences =====

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getVendorStorePreferences)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get vendor profile progress bar data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:52:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getVendorStorePreferences)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get vendor profile progress bar data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:52:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      50 |         let response = await request.get(endPoints.getVendorStorePreferences)
      51 |         let responseBody = await apiUtils.getResponseBody(response)
    > 52 |         expect(response.ok()).toBeTruthy()
         |                               ^
      53 |     });
      54 |
      55 |     test('get vendor profile progress bar data', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:52:31
]]>
</failure>
</testcase>
<testcase name="vendor dashboard api test get vendor profile progress bar data" classname="v2/v1vendorDashborad.spec.ts › vendor dashboard api test › get vendor profile progress bar data" time="0.473">
<failure message="v1vendorDashborad.spec.ts:55:9 get vendor profile progress bar data" type="FAILURE">
<![CDATA[  v2/v1vendorDashborad.spec.ts:55:9 › vendor dashboard api test › get vendor profile progress bar data 

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getVendorProfileProgressBarData)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:58:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getVendorProfileProgressBarData)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:58:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      56 |         let response = await request.get(endPoints.getVendorProfileProgressBarData)
      57 |         let responseBody = await apiUtils.getResponseBody(response)
    > 58 |         expect(response.ok()).toBeTruthy()
         |                               ^
      59 |     });
      60 |
      61 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/v1vendorDashborad.spec.ts:58:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="v2/withdraw.spec.ts" timestamp="1674073035097" hostname="" tests="2" failures="2" skipped="0" time="0.962" errors="0">
<testcase name="withdraw api test get withdraw settings @v2" classname="v2/withdraw.spec.ts › withdraw api test › get withdraw settings @v2" time="0.484">
<failure message="withdraw.spec.ts:19:9 get withdraw settings @v2" type="FAILURE">
<![CDATA[  v2/withdraw.spec.ts:19:9 › withdraw api test › get withdraw settings @v2 =========================

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getWithdrawSettings)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get withdraw summary @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:22:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getWithdrawSettings)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get withdraw summary @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:22:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      20 |         let response = await request.get(endPoints.getWithdrawSettings)
      21 |         let responseBody = await apiUtils.getResponseBody(response)
    > 22 |         expect(response.ok()).toBeTruthy()
         |                               ^
      23 |     });
      24 |
      25 |     test('get withdraw summary @v2', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:22:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test get withdraw summary @v2" classname="v2/withdraw.spec.ts › withdraw api test › get withdraw summary @v2" time="0.478">
<failure message="withdraw.spec.ts:25:9 get withdraw summary @v2" type="FAILURE">
<![CDATA[  v2/withdraw.spec.ts:25:9 › withdraw api test › get withdraw summary @v2 ==========================

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getWithdrawSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:28:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getWithdrawSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:28:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      26 |         let response = await request.get(endPoints.getWithdrawSummary)
      27 |         let responseBody = await apiUtils.getResponseBody(response)
    > 28 |         expect(response.ok()).toBeTruthy()
         |                               ^
      29 |     });
      30 |
      31 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/v2/withdraw.spec.ts:28:31
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="wholesaleCustomers.spec.ts" timestamp="1674073035097" hostname="" tests="5" failures="5" skipped="0" time="2.171" errors="0">
<testcase name="wholesale customers api test get all wholesale customers @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › get all wholesale customers @pro" time="0.37">
<failure message="wholesaleCustomers.spec.ts:22:9 get all wholesale customers @pro" type="FAILURE">
<![CDATA[  wholesaleCustomers.spec.ts:22:9 › wholesale customers api test › get all wholesale customers @pro 

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllWholesaleCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('create a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:25:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllWholesaleCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('create a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:25:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      23 |         let response = await request.get(endPoints.getAllWholesaleCustomers)
      24 |         let responseBody = await apiUtils.getResponseBody(response)
    > 25 |         expect(response.ok()).toBeTruthy()
         |                               ^
      26 |     });
      27 |
      28 |     test('create a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:25:31
]]>
</failure>
</testcase>
<testcase name="wholesale customers api test create a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › create a wholesale customer @pro" time="0.703">
<failure message="wholesaleCustomers.spec.ts:28:9 create a wholesale customer @pro" type="FAILURE">
<![CDATA[  wholesaleCustomers.spec.ts:28:9 › wholesale customers api test › create a wholesale customer @pro 

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.post(endPoints.createWholesaleCustomer, { data: { id: customerId } })
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('update a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:33:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.post(endPoints.createWholesaleCustomer, { data: { id: customerId } })
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('update a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:33:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      31 |         let response = await request.post(endPoints.createWholesaleCustomer, { data: { id: customerId } })
      32 |         let responseBody = await apiUtils.getResponseBody(response)
    > 33 |         expect(response.ok()).toBeTruthy()
         |                               ^
      34 |     });
      35 |
      36 |     test('update a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:33:31
]]>
</failure>
</testcase>
<testcase name="wholesale customers api test update a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › update a wholesale customer @pro" time="0.368">
<failure message="wholesaleCustomers.spec.ts:36:9 update a wholesale customer @pro" type="FAILURE">
<![CDATA[  wholesaleCustomers.spec.ts:36:9 › wholesale customers api test › update a wholesale customer @pro 

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.updateWholesaleCustomer })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('delete a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:41:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.updateWholesaleCustomer })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('delete a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:41:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.updateWholesaleCustomer })
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('delete a wholesale customer @pro', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:41:31
]]>
</failure>
</testcase>
<testcase name="wholesale customers api test delete a wholesale customer @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › delete a wholesale customer @pro" time="0.368">
<failure message="wholesaleCustomers.spec.ts:44:9 delete a wholesale customer @pro" type="FAILURE">
<![CDATA[  wholesaleCustomers.spec.ts:44:9 › wholesale customers api test › delete a wholesale customer @pro 

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.deleteWholesaleCustomer })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:49:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.deleteWholesaleCustomer })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:49:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.post(endPoints.updateCustomer(wholesaleCustomerId), { data: payloads.deleteWholesaleCustomer })
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:49:31
]]>
</failure>
</testcase>
<testcase name="wholesale customers api test update batch wholesale customers @pro" classname="wholesaleCustomers.spec.ts › wholesale customers api test › update batch wholesale customers @pro" time="0.362">
<failure message="wholesaleCustomers.spec.ts:52:9 update batch wholesale customers @pro" type="FAILURE">
<![CDATA[  wholesaleCustomers.spec.ts:52:9 › wholesale customers api test › update batch wholesale customers @pro 

    TypeError: (intermediate value).map is not a function

      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 
    > 53 |         let allWholesaleCustomerIds = (await apiUtils.getAllWholesaleCustomers()).map((a: { id: any }) => a.id)
         |                                                                                   ^
      54 |         // console.log(allWholesaleCustomerIds)
      55 |
      56 |         let response = await request.put(endPoints.updateBatchWholesaleCustomer, { data: { activate: allWholesaleCustomerIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:53:83

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 
    > 53 |         let allWholesaleCustomerIds = (await apiUtils.getAllWholesaleCustomers()).map((a: { id: any }) => a.id)
         |                                                                                   ^
      54 |         // console.log(allWholesaleCustomerIds)
      55 |
      56 |         let response = await request.put(endPoints.updateBatchWholesaleCustomer, { data: { activate: allWholesaleCustomerIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:53:83

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      51 |
      52 |     test('update batch wholesale customers @pro', async ({ request }) => { 
    > 53 |         let allWholesaleCustomerIds = (await apiUtils.getAllWholesaleCustomers()).map((a: { id: any }) => a.id)
         |                                                                                   ^
      54 |         // console.log(allWholesaleCustomerIds)
      55 |
      56 |         let response = await request.put(endPoints.updateBatchWholesaleCustomer, { data: { activate: allWholesaleCustomerIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/wholesaleCustomers.spec.ts:53:83
]]>
</failure>
</testcase>
</testsuite>
<testsuite name="withdraws.spec.ts" timestamp="1674073035097" hostname="" tests="8" failures="8" skipped="0" time="3.56" errors="0">
<testcase name="withdraw api test get balance details" classname="withdraws.spec.ts › withdraw api test › get balance details" time="0.36">
<failure message="withdraws.spec.ts:26:9 get balance details" type="FAILURE">
<![CDATA[  withdraws.spec.ts:26:9 › withdraw api test › get balance details =================================

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getBalanceDetails)
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get all withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:29:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getBalanceDetails)
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get all withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:29:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.get(endPoints.getBalanceDetails)
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         expect(response.ok()).toBeTruthy()
         |                               ^
      30 |     });
      31 |
      32 |     test('get all withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:29:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test get all withdraws" classname="withdraws.spec.ts › withdraw api test › get all withdraws" time="0.36">
<failure message="withdraws.spec.ts:32:9 get all withdraws" type="FAILURE">
<![CDATA[  withdraws.spec.ts:32:9 › withdraw api test › get all withdraws ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      33 |         let response = await request.get(endPoints.getAllWithdraws)
      34 |         let responseBody = await apiUtils.getResponseBody(response)
    > 35 |         expect(response.ok()).toBeTruthy()
         |                               ^
      36 |     });
      37 |
      38 |     test('get all withdraws by status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:35:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      33 |         let response = await request.get(endPoints.getAllWithdraws)
      34 |         let responseBody = await apiUtils.getResponseBody(response)
    > 35 |         expect(response.ok()).toBeTruthy()
         |                               ^
      36 |     });
      37 |
      38 |     test('get all withdraws by status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:35:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      33 |         let response = await request.get(endPoints.getAllWithdraws)
      34 |         let responseBody = await apiUtils.getResponseBody(response)
    > 35 |         expect(response.ok()).toBeTruthy()
         |                               ^
      36 |     });
      37 |
      38 |     test('get all withdraws by status', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:35:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test get all withdraws by status" classname="withdraws.spec.ts › withdraw api test › get all withdraws by status" time="0.36">
<failure message="withdraws.spec.ts:38:9 get all withdraws by status" type="FAILURE">
<![CDATA[  withdraws.spec.ts:38:9 › withdraw api test › get all withdraws by status =========================

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.get(endPoints.getAllWithdrawsByStatus('pending')) // pending, cancelled, approved
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('get single withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:41:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.get(endPoints.getAllWithdrawsByStatus('pending')) // pending, cancelled, approved
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('get single withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:41:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      39 |         let response = await request.get(endPoints.getAllWithdrawsByStatus('pending')) // pending, cancelled, approved
      40 |         let responseBody = await apiUtils.getResponseBody(response)
    > 41 |         expect(response.ok()).toBeTruthy()
         |                               ^
      42 |     });
      43 |
      44 |     test('get single withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:41:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test get single withdraw" classname="withdraws.spec.ts › withdraw api test › get single withdraw" time="0.355">
<failure message="withdraws.spec.ts:44:9 get single withdraw" type="FAILURE">
<![CDATA[  withdraws.spec.ts:44:9 › withdraw api test › get single withdraw =================================

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.get(endPoints.getSingleWithdraw(withdrawId))
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:49:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.get(endPoints.getSingleWithdraw(withdrawId))
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:49:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      47 |         let response = await request.get(endPoints.getSingleWithdraw(withdrawId))
      48 |         let responseBody = await apiUtils.getResponseBody(response)
    > 49 |         expect(response.ok()).toBeTruthy()
         |                               ^
      50 |     });
      51 |
      52 |     test('update a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:49:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test update a withdraw" classname="withdraws.spec.ts › withdraw api test › update a withdraw" time="0.359">
<failure message="withdraws.spec.ts:52:9 update a withdraw" type="FAILURE">
<![CDATA[  withdraws.spec.ts:52:9 › withdraw api test › update a withdraw ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.put(endPoints.updateWithdraw(withdrawId), { data: payloads.updateWithdraw })
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('cancel a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:57:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.put(endPoints.updateWithdraw(withdrawId), { data: payloads.updateWithdraw })
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('cancel a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:57:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      55 |         let response = await request.put(endPoints.updateWithdraw(withdrawId), { data: payloads.updateWithdraw })
      56 |         let responseBody = await apiUtils.getResponseBody(response)
    > 57 |         expect(response.ok()).toBeTruthy()
         |                               ^
      58 |     });
      59 |
      60 |     test('cancel a withdraw', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:57:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test cancel a withdraw" classname="withdraws.spec.ts › withdraw api test › cancel a withdraw" time="0.357">
<failure message="withdraws.spec.ts:60:9 cancel a withdraw" type="FAILURE">
<![CDATA[  withdraws.spec.ts:60:9 › withdraw api test › cancel a withdraw ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      63 |         let response = await request.delete(endPoints.cancelAWithdraw(withdrawId))
      64 |         let responseBody = await apiUtils.getResponseBody(response)
    > 65 |         expect(response.ok()).toBeTruthy()
         |                               ^
      66 |     });
      67 |
      68 |     test('update batch withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:65:31

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      63 |         let response = await request.delete(endPoints.cancelAWithdraw(withdrawId))
      64 |         let responseBody = await apiUtils.getResponseBody(response)
    > 65 |         expect(response.ok()).toBeTruthy()
         |                               ^
      66 |     });
      67 |
      68 |     test('update batch withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:65:31

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      63 |         let response = await request.delete(endPoints.cancelAWithdraw(withdrawId))
      64 |         let responseBody = await apiUtils.getResponseBody(response)
    > 65 |         expect(response.ok()).toBeTruthy()
         |                               ^
      66 |     });
      67 |
      68 |     test('update batch withdraws', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:65:31
]]>
</failure>
</testcase>
<testcase name="withdraw api test update batch withdraws" classname="withdraws.spec.ts › withdraw api test › update batch withdraws" time="0.352">
<failure message="withdraws.spec.ts:68:9 update batch withdraws" type="FAILURE">
<![CDATA[  withdraws.spec.ts:68:9 › withdraw api test › update batch withdraws ==============================

    TypeError: (intermediate value).map is not a function

      67 |
      68 |     test('update batch withdraws', async ({ request }) => {
    > 69 |         let allWithdrawIds = (await apiUtils.getAllWithdraws()).map((a: { id: any }) => a.id)
         |                                                                 ^
      70 |         // console.log(allWithdrawIds) 
      71 |
      72 |         let response = await request.put(endPoints.updateBatchWithdraws, { data: { approved: allWithdrawIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:69:65

    Retry #1 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      67 |
      68 |     test('update batch withdraws', async ({ request }) => {
    > 69 |         let allWithdrawIds = (await apiUtils.getAllWithdraws()).map((a: { id: any }) => a.id)
         |                                                                 ^
      70 |         // console.log(allWithdrawIds) 
      71 |
      72 |         let response = await request.put(endPoints.updateBatchWithdraws, { data: { approved: allWithdrawIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:69:65

    Retry #2 ---------------------------------------------------------------------------------------

    TypeError: (intermediate value).map is not a function

      67 |
      68 |     test('update batch withdraws', async ({ request }) => {
    > 69 |         let allWithdrawIds = (await apiUtils.getAllWithdraws()).map((a: { id: any }) => a.id)
         |                                                                 ^
      70 |         // console.log(allWithdrawIds) 
      71 |
      72 |         let response = await request.put(endPoints.updateBatchWithdraws, { data: { approved: allWithdrawIds } })

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:69:65
]]>
</failure>
</testcase>
<testcase name="withdraw api test create a withdraw" classname="withdraws.spec.ts › withdraw api test › create a withdraw" time="1.057">
<failure message="withdraws.spec.ts:78:9 create a withdraw" type="FAILURE">
<![CDATA[  withdraws.spec.ts:78:9 › withdraw api test › create a withdraw ===================================

    Error: expect(received).toBeTruthy()

    Received: false

      83 |          let response = await request.post(endPoints.createWithdraw, { data: { ...payloads.createWithdraw, amount: minimumWithdrawLimit } })
      84 |          let responseBody = await apiUtils.getResponseBody(response)
    > 85 |          expect(response.ok()).toBeTruthy()
         |                                ^
      86 |          expect(response.status()).toBe(201)
      87 |      });
      88 |

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:85:32

    Retry #1 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      83 |          let response = await request.post(endPoints.createWithdraw, { data: { ...payloads.createWithdraw, amount: minimumWithdrawLimit } })
      84 |          let responseBody = await apiUtils.getResponseBody(response)
    > 85 |          expect(response.ok()).toBeTruthy()
         |                                ^
      86 |          expect(response.status()).toBe(201)
      87 |      });
      88 |

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:85:32

    Retry #2 ---------------------------------------------------------------------------------------

    Error: expect(received).toBeTruthy()

    Received: false

      83 |          let response = await request.post(endPoints.createWithdraw, { data: { ...payloads.createWithdraw, amount: minimumWithdrawLimit } })
      84 |          let responseBody = await apiUtils.getResponseBody(response)
    > 85 |          expect(response.ok()).toBeTruthy()
         |                                ^
      86 |          expect(response.status()).toBe(201)
      87 |      });
      88 |

        at /home/runner/work/dokan/dokan/tests/api/tests/withdraws.spec.ts:85:32
]]>
</failure>
<system-out>
<![CDATA[canceled previous withdraw
canceled previous withdraw
canceled previous withdraw
]]>
</system-out>
</testcase>
</testsuite>
</testsuites>