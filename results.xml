<testsuites id="" name="" tests="3" failures="3" skipped="0" errors="0" time="5.816652000000002">
<testsuite name="_setup.spec.ts" timestamp="1674100528231" hostname="" tests="3" failures="3" skipped="0" time="0.82" errors="0">
<testcase name=" api test setup test store settings" classname="_setup.spec.ts ›  api test › setup test store settings" time="0.406">
<failure message="_setup.spec.ts:19:9 setup test store settings" type="FAILURE">
<![CDATA[  _setup.spec.ts:19:9 ›  api test › setup test store settings ======================================

    Error: expect(received).toBeTruthy()

    Received: false

      21 |         let response = await request.put(endPoints.updateSettings, { data: payloads.setupStore })
      22 |         let responseBody = await apiUtils.getResponseBody(response)
    > 23 |         expect(response.ok()).toBeTruthy()
         |                               ^
      24 |     });
      25 |
      26 |     test('create test customer', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:23:31
]]>
</failure>
<system-out>
<![CDATA[http://localhost:8888?rest_route=/dokan/v1/settings
Status Code:  [33m404[39m
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
]]>
</system-out>
</testcase>
<testcase name=" api test create test customer" classname="_setup.spec.ts ›  api test › create test customer" time="0.212">
<failure message="_setup.spec.ts:26:9 create test customer" type="FAILURE">
<![CDATA[  _setup.spec.ts:26:9 ›  api test › create test customer ===========================================

    Error: expect(received).toBeTruthy()

    Received: false

      27 |         let response = await request.post(endPoints.createCustomer, { data: payloads.createCustomer1 })
      28 |         let responseBody = await apiUtils.getResponseBody(response)
    > 29 |         responseBody.code === 'registration-error-email-exists' ? expect(response.status()).toBe(400) : expect(response.ok()).toBeTruthy()
         |                                                                                                                               ^
      30 |     });
      31 |
      32 |     test('create test vendor', async ({ request }) => {

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:29:127
]]>
</failure>
<system-out>
<![CDATA[Status Code:  [33m404[39m
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
]]>
</system-out>
</testcase>
<testcase name=" api test create test vendor" classname="_setup.spec.ts ›  api test › create test vendor" time="0.202">
<failure message="_setup.spec.ts:32:9 create test vendor" type="FAILURE">
<![CDATA[  _setup.spec.ts:32:9 ›  api test › create test vendor =============================================

    Error: expect(received).toBeTruthy()

    Received: false

      33 |         let response = await request.post(endPoints.createStore, { data: payloads.createStore1 })
      34 |         let responseBody = await apiUtils.getResponseBody(response)
    > 35 |         responseBody.code === 'existing_user_login' ? expect(response.status()).toBe(500) : expect(response.ok()).toBeTruthy()
         |                                                                                                                   ^
      36 |     });
      37 |
      38 | });

        at /home/runner/work/dokan/dokan/tests/api/tests/_setup.spec.ts:35:115
]]>
</failure>
<system-out>
<![CDATA[Status Code:  [33m404[39m
ResponseBody:  {
  code: [32m'rest_no_route'[39m,
  message: [32m'No route was found matching the URL and request method.'[39m,
  data: { status: [33m404[39m }
}
]]>
</system-out>
</testcase>
</testsuite>
</testsuites>